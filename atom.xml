<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一护的Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-27T04:04:47.706Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bleach一护</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CE小游戏第一关</title>
    <link href="http://yoursite.com/2019/08/11/CE%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%AC%AC%E4%B8%80%E5%85%B3/"/>
    <id>http://yoursite.com/2019/08/11/CE小游戏第一关/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2019-09-27T04:04:47.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CE小游戏第一关"><a href="#CE小游戏第一关" class="headerlink" title="CE小游戏第一关"></a>CE小游戏第一关</h3><ul><li>这次首先来讲一下CE自带的小游戏的第一关，第一关的意思就是每发射5次子弹目标就会重新恢复生命，我们要做的就是把目标击败。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-1.jpg" alt="小游戏的第一关"><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4></li><li>我们来尝试攻击目标发现其血量在依次降低，到了第五次恢复满，于是就有想法去搜索其生命值，第一次未知就搜未知的值，后面生命值减少时，搜减少的值，当生命值增加时，再去搜增加的值来锁定血量的地址。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-2.jpg" alt="初次搜索"><br>当我们第一次搜减小的值发现有很多值，于是我们还要继续这样来搜索以便减少无用的地址量。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-3.jpg" alt="第四次搜索"></li><li>当我们在搜索到第4次发现一个值只有4，很符合我们的需求，于是我们再测第五次来验证我们的想法。第五次搜索后其值更改回了100，于是我们可以确定这个地址就是我们要找的血量地址。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-4.jpg" alt="第五次搜索"></li><li>我们找到了地址以后肯定想着要去改变它的值，好让我们通关，于是我们来看看是什么地方改变其值的，<strong>ctrl+f6</strong> 走着，找到了改变其值的代码，于是我们肯定想着去更改代码。于是我们在这里进行代码注入。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-5.jpg" alt="能修改血量的代码"></li><li>我们把其值改为0，然后再去打它发现我们就已经成功了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-7.jpg" alt="代码注入修改其值"><br>于是我们就已经采用这种方法完成了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-8.jpg" alt="结果图"></li></ul><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><ul><li>我们发现我们的子弹只有五发，于是另一个想法就是我们把子弹的数量改为很多不久也可以改变其值，于是我们就顺着这个思路来做。但是再测试中我也尝试在子弹只有五发的时候来搜索5，但是顺着这个思路走，发现根本无法找到我们想要的结果，于是我就想子弹应该是存在数组中的，通过函数来减小其值，于是就有了一个想法就是数组在入栈的时候，其第一个值如array[0],应该是最靠近栈顶的，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-9.jpg" alt="简单的数组例子">,这样我们就能更加直观的体会到我们应该怎么样去查了，我们在想想假如存了5发子弹我们可以正向的记录打出的子弹，也可以记录剩下多少子弹，于是我们就猜测数组里存放的是打了几发子弹（这样便于记录）,于是我们在第一次搜索0，第二次搜索1，依次类推。以这种方式我们成功的找到子弹数量的地址，于是我们还是要再次代码注入。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-10.jpg" alt="子弹数量"></li><li>观察代码可以看出其值是每次加1，也就是说和我们猜测的一致，于是我们只要把1改为0就可以了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-11.jpg" alt="原始代码"><br>-当我们把子弹改为 <em>add 00</em> 我们便可以发现子弹的数量就不会变了，于是我们变成功了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-12.jpg" alt="结果图"><h4 id="这样我们第一关就结束了！！！！！！"><a href="#这样我们第一关就结束了！！！！！！" class="headerlink" title="这样我们第一关就结束了！！！！！！"></a>这样我们第一关就结束了！！！！！！</h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CE小游戏第一关&quot;&gt;&lt;a href=&quot;#CE小游戏第一关&quot; class=&quot;headerlink&quot; title=&quot;CE小游戏第一关&quot;&gt;&lt;/a&gt;CE小游戏第一关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这次首先来讲一下CE自带的小游戏的第一关，第一关的意思就是每发射5次子弹目标就会
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="CE" scheme="http://yoursite.com/categories/Hexo/CE/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="CE" scheme="http://yoursite.com/tags/CE/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme02</title>
    <link href="http://yoursite.com/2019/04/11/160%E4%B8%AAcrackme02/"/>
    <id>http://yoursite.com/2019/04/11/160个crackme02/</id>
    <published>2019-04-10T16:00:00.000Z</published>
    <updated>2019-09-27T02:11:37.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme02"><a href="#160个crackme02" class="headerlink" title="160个crackme02"></a>160个crackme02</h3><p> 1.首先来尝试爆破</p><ul><li>首先直接打开这个小程序随便输入一个账号和密码，来尝试一下是什么效果：<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/7.jpg" alt="图片"><br>我们通过输入可以看出来会有弹窗，这样我们就可以用OD的插件来去搜索字符串，找到地址来具体分析，之后我们打开OD<br>来用插件查看其地址.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/8.jpg" alt="地址信息"> 我们进入去分析，我们看到了前面有一个je，并且跳转地址是判断错误的地方，断定这个地方就是关键跳转点。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/9.jpg" alt="关键跳转点">,于是我们就可以通过把ZF的值改变，来爆破。也可以nop填充来爆破。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/10.jpg" alt="修改后的结果"><br>当然这只是第一步，下面就来对密码生成的算法来尝试破解</li></ul><p> 2.破解密码生成的算法</p><ul><li><p>我们这里就要从头开始分析，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/11.jpg" alt="分析"><br>第一个函数，是来获得你输入账号的长度。再用其长度<em>0x17CFB.<br>第二个函数，是获得你输入账号的第一个字符的ascii码的值，然后，再把值和上一步得到的结果相加。后面的汇编很长，在这里还有一个是把“AKA-”这个前缀给了密码。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/13.jpg" alt="密码前缀"><br>但是都不是检查输入的密码和生成密码是否相同的，我们要去找到一个比较两者是否相同的函数.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/12.jpg" alt="比较函数"><br>从这个地方看到一个cmp的函数推测是来比较密码是否一致的，我们下一个断点，F7跟进一下。我们可以看到在函数中就有了密码的比较，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/14.jpg" alt="比较函数内部"><br>在这个栈中可以清楚的看到两个密码，于是可以断定密码的生成方法就是: **AKA-长度</em>0x17CFB+账号的第一个字符的ascii码的值**<br>然后写一个简单python脚本来实现此过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1=input(&quot;输入一个字符串&quot;)</span><br><span class="line">pass1 =len(str1)*0x17CFB</span><br><span class="line">pass2=ord(str1[0])+pass1</span><br><span class="line">pass3=&quot;AKA-&quot;+str(pass2)</span><br><span class="line">print(pass3)</span><br></pre></td></tr></table></figure></li><li><p>然后我们来测试一下是否正确:<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/15.jpg" alt="测试结果图"><br>到此为止就已经完成了crackme02！！！</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme02&quot;&gt;&lt;a href=&quot;#160个crackme02&quot; class=&quot;headerlink&quot; title=&quot;160个crackme02&quot;&gt;&lt;/a&gt;160个crackme02&lt;/h3&gt;&lt;p&gt; 1.首先来尝试爆破&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CE的基础练习</title>
    <link href="http://yoursite.com/2019/02/06/CE%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/02/06/CE的基础练习/</id>
    <published>2019-02-05T16:00:00.000Z</published>
    <updated>2019-09-25T14:46:52.770Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CE的基础练习"><a href="#CE的基础练习" class="headerlink" title="CE的基础练习"></a>CE的基础练习</h3><ul><li>首先，CE就是cheat engine就是作弊引擎，我也是看了吾爱破解的大佬的相关文章之后也觉得记录一下自己的学习过程。附上大佬的帖子链接<a href="https://www.52pojie.cn/thread-691615-1-1.html#18713591_ce-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">吾爱破解CE链接</a></li><li>接下来，我们就直接开始做做CE提供的基础题，我这里用的CE是中文版的，大家也可以直接在我爱破解上下载，或者用我在这里给的链接<a href="https://pan.baidu.com/s/1-tqv2A-dNmQc6XVcAWQCMA" target="_blank" rel="noopener">CE中文版</a>,提取码是:<strong>0o2z</strong><br>不过下载完解压完之后还不是中文版，大家要自己在setting选项上选择中文。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-02-16.jpg" alt="设置语言"></li><li>接下来就要开始CE的基础使用了，CE自己提供了一个内置的小学习程序挺有趣的教学内容，我们就一题一题的往下做。<ol><li>首先第一题，CE的这个小练习，在帮助栏里可以找到。那第一题的要求是这样的<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-08-22.jpg" alt="第一题">,<em>就是要我们把生命值改为1000</em>，而且提示里说用精确数值扫描，所以我们就顺着题目的要求来找到地址，修改值即可。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-13-31.jpg" alt="CE的基本使用"><br>首先我们先要把进程加载到CE中，然后我们用精确数值扫描。我们知道刚刚开始时，生命是100，所以我们首先来搜100，就是用默认的4字节的方式就可以。第一次扫描会有很多的值，所以我们要进行筛选。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-19-14.jpg" alt="第一次搜索的结果">我们点击 <strong>“打我”</strong>，可以看到我们的生命减一点变为了98，于是我们再去搜索98，就这样持续下去可以定位到改变生命的地址.我们双击那个唯一的地址，把他加入到地址列表中，修改值为1000。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-20-06.jpg" alt="修改结果">，这样我们就可以回到那个小测试上，发现已经可以点击下一步了，第一题就结束了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-27-15.jpg" alt="结果图"></li><li>接着就开始做第二个题目，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-29-01.jpg" alt="第二题">第二个题目就是说是未知大小的值，因为我们看不到我们的生命值，于是我们可以使用CE的未知值来先搜索，我们在扫描类型中选择 <strong>未知的初始值</strong><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-34-00.jpg" alt="扫描类型"> 然后开始扫描,可以看到扫描结果很大，连地址都没有出现，但是我们可以想象到应该通过血量的变化来锁定地址，在小程序中点击打我，可以看到生命值减小了，于是我们在接着搜 <strong>减少的数值</strong>那一项*<em>,<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-39-00.jpg" alt="减少的数值">可以看到地址减少了很多，于是还是继续上述的打我-搜减小的数值,得到如下的结果<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-43-14.jpg" alt="锁定地址">,结合提示信息知道血量在 </em>0-500* 之间于是我们找到地址直接改为5000结束。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-48-26.jpg" alt="结果"></li><li>第三题是关于浮点数，单双精度的问题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-53-45.jpg" alt="题目">这两个算是很简单的了，直接在搜索中选择确定的值，在 <strong>数值类型</strong> 中选择单浮点和多浮点然后再按照上两题那样的方法，来锁定地址就可以过关了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-57-50.jpg" alt="修改图"></li><li>第四题的题目，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-59-58.jpg" alt="题目">本题就是要我们来修改代码来使当我们点击 <strong>改变数值</strong> 时值不改变，那我们还是要先找到变动数值的地址，方法和上面几题一样。然后我们选中地址右键选择 <strong>找出是什么改变了地址</strong> 这一项或者直接 <strong>Ctrl+F6</strong>,然后我们会看到这样一个小窗口，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-12-11.jpg" alt="窗口">,然后我们回到小程序的界面点击改变数值，可以发现其中已经有汇编代码了，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-16-13.jpg" alt="如图">,这里我们直接把它nop掉，或者注释掉都可以实现我们的目的，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-19-21.jpg" alt="NOP掉">，这样就ok了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-22-07.jpg" alt="结果"></li><li>第五题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-22-07.jpg" alt="题目">,这个题目就是去学着去找基址，首先要做的还是锁定数值的地址，方法和上述题目一样。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-35-52.jpg" alt="找到地址">，锁定了之后看他题目的描述，就是找到指针，那我们还是Ctrl+f6走起，来看看什么能改变这个地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-15-33.jpg" alt="详细信息图">，我们可以看到一个很符合指针特征的汇编代码就是<code>MOV [edx],eax</code>这个是典型的指针变量的特征。前面肯定有取址的指令。如果有没有学过c语言的人可能不知道为什么这符合指针的特征，我们就用一个例子来解释一下。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-21-55.jpg" alt="指针的反汇编">,我们可以在VC6的反汇编窗口看到，编译器处理指针时，首先取地址，把地址值传给寄存器，在把寄存器的值传给指针变量，当然这是debug版的。为什么不把地址直接传给指针变量呢（mov指令的使用规则，两个内存不能用mov指令）。这样我们知道指针的特征后，这个题目就很好解决了我们找到了一个地址这个地址是存放在指针里的，在去找一下那个指针的地址，我们只要在去搜一下这个地址即可<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-34-46.jpg" alt="找到基址">，这样我们手动添加到地址栏<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-38-40.jpg" alt="手动添加地址">，我们这里的偏移为0，也很容易理解毕竟只是 <strong>[edx]</strong> 没有偏移。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-41-01.jpg" alt="点一下激活">然后我们找到基址后修改值为5000后点击改变指针就成功完成了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-41-44.jpg" alt="结果图"></li><li>第六题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-28-06.jpg" alt="题目">，这一题就是要我们通过修改代码来实现点一下 <em>打我</em> 加两滴血的操作，当然第一步还是先找到血量的地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-31-25.jpg" alt="地址的值">找到地址后我们就要去看看是哪个地方改变了这个值,<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-33-14.jpg" alt="血量的变化操作">,注意到的操作是<code>sub dword ptr [],01</code>于是我们知道血量的操作是每次减一，我们只要改成 <code>add dword ptr[],02</code>，就可以了我们只要用CE<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-37-59.jpg" alt="自动汇编">，进入自动汇编后选择代码注入<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-39-43.jpg" alt="代码注入">，地址就是在默认的那个点击确定后，出现代码<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-41-16.jpg" alt="代码">，然后按照我的想法修改sub为add后的代码<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-43-37.jpg" alt="修改后的代码">后再去小程序中点击打我会发现开始加血了，于是本题也就成功了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-45-25.jpg" alt="结果"></li><li>第七题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-47-07.jpg" alt="题目">，多级指针这可能是初学c语言的同学最头疼的地方，题目中给出的是一个4级指针，我们不妨在c语言里给出一个四级指针来演示一下过程，好让初学者更好的理解多级指针。首先以2级指针为例，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-55-14.jpg" alt="二级指针的指向问题">，这就很容易理解2级指针里存放的是一级指针的地址，那么如果是4级指针就是存放3级指针的地址，我们来看一下，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-01-16.jpg" alt="4级指针的结果">从图中可以看出对于4级指针它就是存放的3级指针的地址，层层递进的关系。于是我们在来看题目，还是先找到最初的血量地址，方法雷同，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-05-23.jpg" alt="最初的地址">，找到之后我们还是查看什么改变了这个地址，我们可以看到那个代码符合指针的特征<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-07-20.jpg" alt="第一个地址"><code>[esi+18]</code>注意这里的18是偏移量，于是我们把 <em>01936a80</em> 放入搜索栏中得到了一个新的地址，我们还是顺着上面的思路不过这次不要选什么改变了，选什么访问了地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-11-03.jpg" alt="地址2">，然后我们发现怎么地址是一样的呢，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-45-36.jpg" alt="寻找地址">，我的想法就是因为我们得到的地址是加了偏移的地址(在结果栏显示的地址，但是这里没有偏移也就是说我们定位的地址就是其指针的地址)这里引用一个大佬的话 <em>CE 默认使用硬件断点的方式，断点只能停在指令执行之后，而这条指令正好是把 esi 原来指向的地址中的值再赋值给 esi，所以执行之后 esi 的值已经是被覆盖掉的值了，而我们想知道的恰恰是执行这条指令之前的 esi 值，那么怎么办呢</em>，我们发现有一个地址是指向这个地址的于是我想看看是不是这个地址就是上一个指针的地址于是怀着试试看的想法我搜了一下地址，结果发现点击改变数值，确实发生了变化，于是锁定了地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-55-24.jpg" alt="地址">，然后发现这一个的偏移是0x14，于是接着搜地址，这次的地址偏移是0x0c下一次按照提示就应该是基址了<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-57-55.jpg" alt="地址">，于是我们再接着搜地址，就是搜地址找到基址为止！，于是我们终于找到了基址！！！ <img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-03-01.jpg" alt="基址地址">,这样一来剩下的就只要手动加地址，修改值就OK了。再按照我们刚刚讲解的四级指针的运作流程填偏移就很简单了<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/blob/raw/image/Snipaste_2019-09-25_22-07-20.jpg" alt="填偏移地址">，然后我们在锁定一下，再去改值就ok了.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-10-55.jpg" alt="结果"></li><li>第8题 题目<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-14-54.jpg" alt="题目">，这题很好玩就是模拟对打要求就是你要获胜但是不能够锁定生命值，在这道题里生命值为单浮点类型。我的想法就是先找到血量的地址，再通过代码注入来修改生命值获得胜利，我们首先来找我们自己人的生命地址<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-21-52.jpg" alt="生命地址">，我们在地址栏点击我们选中的地址在选择 <strong>浏览相关内存区域</strong>,可以看到在18e00b0处有一个01的标识，可以猜测是否为组队信息，于是我们接着找队友eric与对手HAL的标识来确认我们的新想法。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-29-37.jpg" alt="队友标识"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-29-18.jpg" alt="对手标识">，对比可以看到一个的标识是01，另一个是02这也确定了我们的想法，于是我们就这此处注入代码<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-40-35.jpg" alt="注入的代码">。结果就是不会改变我方的值，只有敌人的血量变化。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-42-55.jpg" alt="结果">，我们点击重启游戏并且执行后发现，我们成功了 ！！！！<br>到这里基础的内容CE内容就结束了，CE后面还自带了几个好玩的小游戏的练习后面也会做出来玩玩。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CE的基础练习&quot;&gt;&lt;a href=&quot;#CE的基础练习&quot; class=&quot;headerlink&quot; title=&quot;CE的基础练习&quot;&gt;&lt;/a&gt;CE的基础练习&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，CE就是cheat engine就是作弊引擎，我也是看了吾爱破解的大佬的相关文章之
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="Cheat Engine" scheme="http://yoursite.com/categories/Hexo/Cheat-Engine/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Cheat Engine" scheme="http://yoursite.com/tags/Cheat-Engine/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习1</title>
    <link href="http://yoursite.com/2019/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/"/>
    <id>http://yoursite.com/2019/02/06/正则表达式1/</id>
    <published>2019-02-05T16:00:00.000Z</published>
    <updated>2019-03-16T15:40:19.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式的初步学习"><a href="#正则表达式的初步学习" class="headerlink" title="正则表达式的初步学习"></a>正则表达式的初步学习</h3><p>第一次接触正则是在大二的时候，现在长时间不使用，有些概念比较模糊，因此准备重拾一下自己的知识。</p><hr><hr><ol><li><p>正则表达式是什么？</p><ul><li>正则表达式<em>在菜鸟教程中的概念如下</em>：<blockquote><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p></blockquote></li><li>我的个人理解就是来对文本进行匹配的。</li></ul></li><li><p>正则表达式的基础规则：</p><ul><li>位置标记： <strong>位置标记锚点</strong>是表识字符串位置的正则表达式。</li></ul></li></ol><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:left">^</td><td style="text-align:left">指定了匹配正则表达式的文本必须始于字符串的首部</td><td style="text-align:center">^zxc可匹配以zxc为首的行</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">指定了匹配正则表达式的文本必须始于字符串的尾部</td><td style="text-align:center">zxc$可匹配以zxc结尾的行</td></tr></tbody></table><ul><li>标识符: <strong>标识符是正则表达式的基础部分</strong></li></ul><table><thead><tr><th style="text-align:center">正则表达式</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配任意一个字符</td><td style="text-align:center">asq.可以匹配asq1或者asqe 但是不能匹配asqer 其只能匹配单个的字符</td></tr><tr><td style="text-align:center">[ ]</td><td style="text-align:center">匹配括号中的任意一个字符，中括号内可以为字符组或者字符范围</td><td style="text-align:center">par[kj]可以匹配park或者parj ,[0-9]可以匹配任意的单个数字</td></tr><tr><td style="text-align:center">[ ^ ]</td><td style="text-align:center">匹配不在中括号中的任意一个字符</td><td style="text-align:center">这个就比较好理解如 9[^12]就不能匹配91 或者 92</td></tr></tbody></table><ul><li>数量修饰符:  <strong>数量修饰符定义了模式可出现的次数</strong></li></ul><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:right">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:left">?</td><td style="text-align:right">只能够匹配之前的项1次或者0次</td><td style="text-align:center">courl?可以匹配courl 或者是cour</td></tr><tr><td style="text-align:left">+</td><td style="text-align:right">匹配之前的一项1次或者多次</td><td style="text-align:center">courl+ 可以匹配courl或者 courll 等等</td></tr><tr><td style="text-align:left">*</td><td style="text-align:right">可以匹配之前的一项0次或者多次</td><td style="text-align:center">c * ourl可以匹配 courl或者ccourl或者是ourl 等等</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:right">匹配之前的项n次</td><td style="text-align:center">如[0-9]{2} 能够匹配任意的两位数</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:right">之前的项至少要匹配n次</td><td style="text-align:center">如[0-9]{4}能够匹配任意一个4位数或者更多位的数字</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:right">之前的项匹配的最小次数与最多次数</td><td style="text-align:center">[0-9]{2,5}匹配两位数到五位数之前的任何数字</td></tr></tbody></table><hr><p>正则表达式的基本规则大概就是这些，之后会给出如何匹配出你想要得到的数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正则表达式的初步学习&quot;&gt;&lt;a href=&quot;#正则表达式的初步学习&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的初步学习&quot;&gt;&lt;/a&gt;正则表达式的初步学习&lt;/h3&gt;&lt;p&gt;第一次接触正则是在大二的时候，现在长时间不使用，有些概念比较模糊，因此准备重
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="正则表达式学习" scheme="http://yoursite.com/categories/Hexo/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="正则表达式学习" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>xpath中常用语法</title>
    <link href="http://yoursite.com/2019/02/04/xpath%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/04/xpath常用语法总结/</id>
    <published>2019-02-03T16:00:00.000Z</published>
    <updated>2019-04-09T14:50:06.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xpath常用语法"><a href="#xpath常用语法" class="headerlink" title="xpath常用语法"></a>xpath常用语法</h3><ol><li>xpath是一门在XML文档中查—<br>title:  正则表达式学习1</li></ol><p>date: 2019-02-06<br>tags:</p><ul><li>Hexo</li><li>正则表达式学习<br>categories:</li><li>Hexo</li><li>正则表达式学习</li></ul><p>—找信息的语言，在爬虫中常用来查找信息，因此掌握其语法，可以帮助我们很好的去查找想要获得的信息。</p><h5 id="如何来进行节点的选择"><a href="#如何来进行节点的选择" class="headerlink" title="如何来进行节点的选择"></a>如何来进行节点的选择</h5><ol><li><p>选择一个<strong>适当的节点</strong>，对于找寻信息至关重要。往往一个/或者//的选取会得到不同的信息，而且可能和你想像的相差甚远。接下来，就来说明几个重要的概念。</p></li><li><p>父节点与子节点:</p><ul><li>如下图所示:<br><img src="https://raw.githubusercontent.com/zxcpaozxc/zxcpaozxc.github.io/master/image/2.jpg" alt="xpath">的解释一样。</li></ul></li><li><p>下面来具体的讲讲如何来选取节点:</p><ul><li>xpath使用路径表达式在XML文档中选择节点的，节点是沿着路径或者step来选取的.</li></ul></li></ol><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>/</td><td>从根节点来选取</td></tr><tr><td>//</td><td>从当前节点进行选取，不考虑其位置</td></tr><tr><td>@</td><td>选取属性</td></tr><tr><td>.</td><td>选取当前节点</td></tr></tbody></table><ul><li>以一个例子来实际操作一下:<br><img src="https://raw.githubusercontent.com/zxcpaozxc/zxcpaozxc.github.io/master/image/3.jpg" alt="豆瓣电影title"><br>先选取其父节点，然后依次来找出信息所在位置的节点信息，最后获得其内容<br>当然，一般浏览器都可以自动获得xpath，但是还是有必要学习一下，以此为例子，我们能够看出来实际中如何取操作这些节点来得到我们想要得到的消息.</li></ul><h4 id="最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath-helper"><a href="#最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath-helper" class="headerlink" title="最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath helper"></a>最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做<strong>xpath helper</strong></h4><hr><p><strong><em>前提是你可以科学上网</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;xpath常用语法&quot;&gt;&lt;a href=&quot;#xpath常用语法&quot; class=&quot;headerlink&quot; title=&quot;xpath常用语法&quot;&gt;&lt;/a&gt;xpath常用语法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;xpath是一门在XML文档中查—&lt;br&gt;title:  正则表达式学习
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/Hexo/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>用lxml与requests模块爬取起点中文网的免费阅读列表</title>
    <link href="http://yoursite.com/2019/02/03/%E7%94%A8python%E4%B8%AD%E7%9A%84lxml%E6%A8%A1%E5%9D%97%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E7%BD%91%E5%85%8D%E8%B4%B9%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/02/03/用python中的lxml模块爬取起点网免费阅读列表/</id>
    <published>2019-02-02T16:00:00.000Z</published>
    <updated>2019-03-10T03:35:57.332Z</updated>
    
    <content type="html"><![CDATA[<h5 id="用lxml与requests模块爬取起点中文网的免费阅读列表"><a href="#用lxml与requests模块爬取起点中文网的免费阅读列表" class="headerlink" title="用lxml与requests模块爬取起点中文网的免费阅读列表"></a>用lxml与requests模块爬取起点中文网的免费阅读列表</h5><p><strong>爬取的思路:</strong></p><ul><li><p>首先来讲,爬取内容并非是最重要的,我个人认为要先知道思路,然后再去写代码,就会容易很多。</p></li><li><p>再就来说说，要写这个爬虫的思路:</p><ul><li><p>首先，应该先看看网站的robots.txt文件，来看一下网站上什么内容可以，让我们去爬取,这里附上其内容，可以看到起点是应该全都可让我们去爬的，然后放心的去写代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> User-Agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /*.css</span><br><span class="line">Allow: /*.js</span><br></pre></td></tr></table></figure></li><li><p>接下来，就是要获得其URL资源，注意到起点网上的free区的URL是如下的，然后我们尝试着去删除一些无用的信息，来简化URL,来获得同样的页面。<br><code>https://www.qidian.com/free/all?orderId=&amp;vip=hidden&amp;style=1&amp;pageSize=20&amp;siteid=1&amp;pubflag=0&amp;hiddenField=1&amp;page=2</code><br>通过尝试我们只要留下 <em>all?page=2</em> 这一部分就可以获得我们想要的结果。于是修改URL为<code>https://www.qidian.com/free/all?page={}</code>这样可以通过<em>format()</em> 方法来构造我们要爬取多少页。</p></li><li><p>下一步，就要去构造xpath，来获得数据,在chrome浏览器中按<strong>F12</strong>来查看网页的源码，接着我们就要去找到信息的位置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;book-mid-info&quot;&gt;</span><br><span class="line">                          &lt;h4&gt;&lt;a href=&quot;//book.qidian.com/info/1010741811&quot; target=&quot;_blank&quot; data-eid=&quot;qd_E05&quot; data-bid=&quot;1010741811&quot;&gt;大劫主&lt;/a&gt;&lt;/h4&gt;</span><br></pre></td></tr></table></figure></li></ul><p>对于此xml的节点，我们要得到一个book的名字就只要用<strong>etree下的xpath方法</strong>，<br>就可以得到想要的信息。代码如下：<code>xpath(&quot;//div[@class=&#39;book-img-text&#39;]//h4//a/text()&quot;)</code>这样就可以得到我们想要的数据了。但是有的地方可能有”\r”或者是空格只要用replace()方法替代一下就可以了。</p></li></ul><h5 id="最后附上全部的代码："><a href="#最后附上全部的代码：" class="headerlink" title="最后附上全部的代码："></a>最后附上全部的代码：</h5><p>附:爬取的结果图：<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/1.jpg" alt="结果"><br><em>这样就可以基本上爬到想要的信息了</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">class qidian:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers =&#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&quot;&#125;</span><br><span class="line">        self.start_url=&quot;https://www.qidian.com/free/all?page=&#123;&#125;&quot;</span><br><span class="line"></span><br><span class="line">    def get_free_url_List(self):</span><br><span class="line">        return [self.start_url.format(i) for i in range(1,120)]</span><br><span class="line"></span><br><span class="line">    def parse_url(self,url):</span><br><span class="line">        response=requests.get(url,headers=self.headers)</span><br><span class="line">        return response.content</span><br><span class="line"></span><br><span class="line">    def get_url_list(self,html_url):</span><br><span class="line">        html=etree.HTML(html_url)</span><br><span class="line">        div_lists=html.xpath(&quot;//div[@class=&apos;all-book-list&apos;]&quot;)</span><br><span class="line">        content_list=[]</span><br><span class="line">        for div in div_lists:</span><br><span class="line">            item=&#123;&#125;</span><br><span class="line">            item[&quot;title&quot;]=div.xpath(&quot;.//h4/a/text()&quot;)</span><br><span class="line">            item[&quot;title&quot;]=item[&quot;title&quot;][0] if len(item[&quot;title&quot;][0])&gt;0 else None</span><br><span class="line">            item[&quot;author&quot;]=div.xpath(&quot;.//p[@class=&apos;author&apos;]//a[@class=&apos;name&apos;]/text()&quot;)</span><br><span class="line">            item[&quot;author&quot;]=item[&quot;author&quot;][0] if len(item[&quot;author&quot;][0])&gt;0 else None</span><br><span class="line">            item[&quot;content-sum&quot;]=div.xpath(&quot;.//p[@class=&apos;intro&apos;]/text()&quot;)</span><br><span class="line">            item[&quot;content-sum&quot;]=[div.replace(&quot;\r&quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]]</span><br><span class="line">            item[&quot;content-sum&quot;]=[div.replace(&quot; &quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]]</span><br><span class="line">            item[&quot;href&quot;]=&quot;https:&quot;+div.xpath(&quot;.//h4/a/@href&quot;)[0] if len(div.xpath(&quot;.//h4/a/@href&quot;)[0])&gt;0 else None</span><br><span class="line">            item[&quot;img&quot;]=&quot;https:&quot;+div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0] if len(div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0])&gt;0 else None</span><br><span class="line">            content_list.append(item)</span><br><span class="line">        return content_list</span><br><span class="line"></span><br><span class="line">    def save_content(self,content_list):</span><br><span class="line">        with open(&quot;起点中文网免费文章1.txt&quot;,&quot;a&quot;,encoding=&apos;utf-8&apos; ) as f:</span><br><span class="line">            for i in content_list:</span><br><span class="line">                 f.write(json.dumps(i, ensure_ascii=False))</span><br><span class="line">                 f.write(&quot;\n&quot;)  # 写入换行符，进行换行     </span><br><span class="line">        print(&quot;保存成功！&quot;)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        # 发送请求，获得响应</span><br><span class="line">        # 接收数据，并处理数据</span><br><span class="line">        # 保存数据</span><br><span class="line">        url_list=self.get_free_url_List()</span><br><span class="line">        for url in url_list:</span><br><span class="line">            html_url=self.parse_url(url)</span><br><span class="line">            content_list=self.get_url_list(html_url)</span><br><span class="line">            self.save_content(content_list)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    spider_qidian=qidian()</span><br><span class="line">    spider_qidian.run()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;用lxml与requests模块爬取起点中文网的免费阅读列表&quot;&gt;&lt;a href=&quot;#用lxml与requests模块爬取起点中文网的免费阅读列表&quot; class=&quot;headerlink&quot; title=&quot;用lxml与requests模块爬取起点中文网的免费阅读列表&quot;&gt;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/Hexo/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python导入lxml中的etree模块</title>
    <link href="http://yoursite.com/2019/02/01/lxml%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/02/01/lxml模块的下载/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-03-09T03:52:46.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python导入lxml中的etree模块"><a href="#python导入lxml中的etree模块" class="headerlink" title="python导入lxml中的etree模块"></a>python导入lxml中的etree模块</h2><ul><li><p>首先，使用pycharm中自带的下载器，下载的是不带etree模块的</p></li><li><p>再一点就是，看网上说<em>部分lxml版本是不含etree模块的</em>应该去找能和自己python版本兼容而且有etree模块的lxml版本</p></li><li><p>可以去官网上下载自己想要的版本<br>官网可用版本链接 <a href="https://pypi.org/project/lxml/3.7.2/#files" target="_blank" rel="noopener">官网</a></p></li></ul><h4 id="如何去安装lxml模块"><a href="#如何去安装lxml模块" class="headerlink" title="如何去安装lxml模块"></a>如何去安装lxml模块</h4><ul><li><p>下载好这样一个文件:<strong>lxml-3.7.2-cp36-cp36m-win32.whl</strong> 后在cmd中用</p><p> <code>pip install lxml-3.7.2-cp36-cp36m-win32.whl</code></p></li><li><p>看提示安装完成后，在cmd中测试查看是否可以使用etree模块,就是进入<em>python</em>,导入<em>etree</em>模块:<code>from lxml import etree</code>,若不报错，说明成功，否则就要检查是哪里出现了问题</p></li><li><p><strong>注意命名文件时不要和这些模块重名，这样也会导入不成功</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python导入lxml中的etree模块&quot;&gt;&lt;a href=&quot;#python导入lxml中的etree模块&quot; class=&quot;headerlink&quot; title=&quot;python导入lxml中的etree模块&quot;&gt;&lt;/a&gt;python导入lxml中的etree模块&lt;/
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/Hexo/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/01/hello-world/"/>
    <id>http://yoursite.com/2018/10/01/hello-world/</id>
    <published>2018-09-30T16:00:00.000Z</published>
    <updated>2019-03-09T03:53:34.973Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
