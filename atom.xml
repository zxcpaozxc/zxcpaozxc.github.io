<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一护的Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-09T12:13:18.567Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bleach一护</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dll简单编程</title>
    <link href="http://yoursite.com/2019/12/29/%E7%AE%80%E5%8D%95dll%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/29/简单dll编程/</id>
    <published>2019-12-28T16:00:00.000Z</published>
    <updated>2020-03-09T12:13:18.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="dll编程"><a href="#dll编程" class="headerlink" title="dll编程"></a>dll编程</h3><h4 id="dll是什么"><a href="#dll是什么" class="headerlink" title="dll是什么"></a>dll是什么</h4><ul><li>dll文件是windows所特有的动态链接库文件，是应用程序的一个模块，主要用来导出一些函数和数据来供程序中的其它模块来使用。比如我们要使用MessageBoxA这个函数，我们就要从user32.dll中导入此函数来供我们使用，但是windows操作系统会为我们导入一些必须的dll，如果我们想要开发自己的模块函数就要自己去编写dll，来动态的加载。<h4 id="dll与exe的关系"><a href="#dll与exe的关系" class="headerlink" title="dll与exe的关系"></a>dll与exe的关系</h4></li><li>dll和exe本质上都是windows的可移植文件都是遵循windows PE结构的。动态链接库文件本质上与可执行文件没有大的区别。都是作为模块被加载到进程的空间地址的。<h4 id="创建一个dll文件"><a href="#创建一个dll文件" class="headerlink" title="创建一个dll文件"></a>创建一个dll文件</h4><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/dll1.jpg" alt="dll的创建"></li><li>创建一个dll也很简单，我们就直接打开vs2019，创建一个动态链接库文件， 如图，然后我们创建完以后，vs会为我们自动生成一些代码。</li><li>动态链接库文件的入口是 <em>BOOL APIENTRY DllMain( HMODULE hModule,DWORD  ul_reason_for_call,LPVOID lpReserved)</em> 这里的 <strong>APIENTRY</strong> 是函数的调用方式，默认为stdcall。<strong>HMODULE</strong> 是dll的模块句柄，下一个参数<br><strong>DWORD ul_reason_for_call</strong> 是指调用的原因，最后一个参数没有被使用。因为DllMain函数是仅供操作系统使用的我们不能把导出函数写在DllMain中，我们在写导出函数时也是可以有两种导出方式一种按名称导出，一种按序号导出。我们这种重点接绍按名称导出。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;pch.h&quot;</span><br><span class="line">BOOL APIENTRY DllMain( HMODULE hModule,</span><br><span class="line">                       DWORD  ul_reason_for_call,</span><br><span class="line">                       LPVOID lpReserved</span><br><span class="line">                     )</span><br><span class="line">&#123;</span><br><span class="line">    switch (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    case DLL_PROCESS_ATTACH:</span><br><span class="line">    case DLL_THREAD_ATTACH:</span><br><span class="line">    case DLL_THREAD_DETACH:</span><br><span class="line">    case DLL_PROCESS_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="编写导出函数"><a href="#编写导出函数" class="headerlink" title="编写导出函数"></a>编写导出函数</h4><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/dll2.jpg" alt="声明"></p><ul><li><p>首先我们要做的是在头文件中声明一下导出函数，而我们写的下面的代码,就是说我们如果按照c++的标准，就定义 <em>EXPORT</em> 关键字为导出函数的格式，也就是说我们在写导出函数时声明就只要加上 <em>EXPORT</em> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef __cplusplus</span><br><span class="line">#define EXPORT extern&quot;C&quot;__declspec(dllexport)</span><br><span class="line">#else</span><br><span class="line">#define EXPORT extern&quot;C&quot;__declspec(dllexport)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li><li><p>声明完成后我们就可以来写一个导出函数，就以一个最简单的例子来写，就是一个加法函数，我们在头文件中声名一下，然后在一个新的文件中使用。</p></li></ul><h4 id="装载期间动态加载"><a href="#装载期间动态加载" class="headerlink" title="装载期间动态加载"></a>装载期间动态加载</h4><ul><li>dll动态链接库文件的导出的函数可以有两种使用方式，第一种是在装载期间动态加载，这种方式需要我们把刚刚写好的dll程序生成的后缀为 <em>.dll和.lib</em> 文件放在我们需要使用导出函数的程序，在我们编写时要加上下面这些话，而且还要显示的声明一下我们要用的导出函数。之后我们就能够使用我们的函数了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#pragma comment(&quot;lib&quot;,&quot;lib文件名&quot;)</span><br><span class="line">extern “C” __declspec(dllimport) void Plus(int x, int y);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/dll4.jpg" alt="使用dll导出的函数"></p><ul><li>这种方式的缺点就是如果没有lib文件就不能够使用了。</li></ul><h4 id="运行时动态加载"><a href="#运行时动态加载" class="headerlink" title="运行时动态加载"></a>运行时动态加载</h4><ul><li>这种方式我们要用到一个很好用的函数LoadLibary以及GetProcAddress函数来动态的加载函数，这两个函数中，LoadLibary函数可以加载目标dll文件，GetProcAddress函数可以获得目标dll中的指定的导出函数的地址。我们只要定义一个函数指针指向此函数就可以了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ell5.jpg" alt="运行时加载"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;dll编程&quot;&gt;&lt;a href=&quot;#dll编程&quot; class=&quot;headerlink&quot; title=&quot;dll编程&quot;&gt;&lt;/a&gt;dll编程&lt;/h3&gt;&lt;h4 id=&quot;dll是什么&quot;&gt;&lt;a href=&quot;#dll是什么&quot; class=&quot;headerlink&quot; title=&quot;d
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="dll编程" scheme="http://yoursite.com/tags/dll%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>crackme_test1</title>
    <link href="http://yoursite.com/2019/11/03/crackme_test1/"/>
    <id>http://yoursite.com/2019/11/03/crackme_test1/</id>
    <published>2019-11-02T16:00:00.000Z</published>
    <updated>2019-11-16T03:57:34.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="crackme-test1"><a href="#crackme-test1" class="headerlink" title="crackme_test1"></a>crackme_test1</h3><h4 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h4><ul><li>这个Crackme是一个外国OD教程教程中的一个很经典的Crackme,今天我也做了一下，来看看到底是什么样子的。首先还是先去查一下壳。PEID显示其是MASM32写的。那我们就先用IDA来看一下。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test1.jpg" alt="查壳信息"></li></ul><h4 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h4><ul><li><p>还是先输入一个测试数据来先试试，输入用户名为 <em>qweqwe</em>, 密码随便输入一个比如 <em>1111111</em> ,发现弹出了错误提示的字符串，然后我们就直接IDA来看详细的信息。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Crackme_test2.jpg" alt="错误提示"></p></li><li><p>IDA载入后F5一下，我们能够看到这个程序使用的是标准的windows消息循环，在main函数中就是一个标准的窗口的注册和创建过程。在这其中最重要的就是窗口的事件处理函数，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Crackme_test2.jpg" alt="main函数中的过程"><br>也就是回调函数。在这个程序中就是 <strong>WndProc</strong>，这样一个函数，跟进去看一下。这个消息处理函数中最重要的就是两个用if语句判断，再去调用函数 DialogBoxParamA去生成子对话框的部分，不过其中第一个子窗口是生成帮助窗口的，也就是说真正的判断窗口是第二个if语句来生成的，我们直接去分析这个部分的子窗口的回调函数。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test4.jpg" alt="回调函数"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test5.jpg" alt="子窗口的回调函数"></p></li><li>跟进第二个子窗口的回调函数也就是 <strong>sub_401253</strong> 这样一个函数，内容如下，其中 <strong>case 0x110u</strong> 是初始化dialog用的，主要看 <em>case 0x110u</em> 这个是对WM_COMMAND来进行处理的，这个也就是获得用户名和密码输入的也没什么大用处。回到WndProc函数中接着分析。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">case 0x110u:</span><br><span class="line">      return SetFocus(hWnd);</span><br><span class="line">    case 0x111u:</span><br><span class="line">      while ( 1 )</span><br><span class="line">      &#123;</span><br><span class="line">        a1 = 0;</span><br><span class="line">        if ( a4 == 1003 )</span><br><span class="line">          break;</span><br><span class="line">        if ( a4 != 1002 )</span><br><span class="line">          return 0;</span><br><span class="line">        a4 = 1003;</span><br><span class="line">        if ( GetDlgItemTextA(hWnd, 1000, String, 11) &gt;= 1 )</span><br><span class="line">        &#123;</span><br><span class="line">          GetDlgItemTextA(hWnd, 1001, byte_40217E, 11);</span><br><span class="line">          a1 = 1;</span><br><span class="line">          goto LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test6.jpg" alt="sub_401253函数"><br>-接着就是一个很重要的函数对用户名的处理，也就是sub_40137E这个函数，跟进去看一下，里面的结果看起来很不舒畅，而且如果这道题只用IDA的F5分析，最后的结果也是不正确的，从这一步起，我推荐用OD去分析。OD载入开始</p><h4 id="OD-分析后面的部分"><a href="#OD-分析后面的部分" class="headerlink" title="OD 分析后面的部分"></a>OD 分析后面的部分</h4><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test7.jpg" alt="OD载入下断点"></p><ul><li>载入OD后我们在0x401228处下断点，因为在这里之后的一个call就是IDA中的sub_40137E这个函数。直接运行输入我们的测试数据，我们直接跟进这个函数。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/blob/raw/image/crackme_test8.jpg" alt="输入测试数据"></li><li><p>对于sub_40137E函数，它做的事情就是</p><ol><li>比较用户名的每一位是否是小于 <em>‘A’</em> 的如果小于’A’直接就退出.</li><li>比较用户名的每一位是否是大于 <em>‘Z’</em> 如果大于Z就会触发另一个函数，而这个函数的作用就是使原来的那一位字母的ascii值减32，也就是小写转大写。</li><li>把用户名的每一位的ascii值相加得到的结果再去异或0X5678<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test9.jpg" alt="sub_40137E函数的功能"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test10.jpg" alt="4013D2函数的功能"></li></ol><ul><li>之后就是对4013D8函数的分析，这个函数是对密码进行处理的。</li></ul><ol><li>首先是取密码的每一位然后减去0x30，之后再用一个变量(初始值为0)乘以0xA。</li><li>然后就是把这个变量的值加上密码减去0x30的值重新赋给变量。</li><li>最后的结果再异或0x1234<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test11jpg.jpg" alt="4013D8函数的功能"></li></ol><ul><li><p>最后就是一个比较，比较两个函数处理后的值是否相等，相等就会弹出成功的messagebox。</p></li><li><p>但是这里我们就要想一想，这个判断的表达式为f1(用户名)=f2(密码)，但是我们随便输入一个密码比如“111”，这个函数再没有XOR0x1234前处理后的结果为”6F”,也就是’111’的16进制。也就是说再没有异或前就是把10进制转为16进制，这样我们就能通过用户名得到结果了， <strong>我们就只要把用户名通过第一个函数的处理再去异或0x1234得到一个十进制数，然后再通过f2函数的处理一定是正确的结果</strong>(异或运算是可逆的)。</p></li></ul></li></ul><h4 id="注册机的编写"><a href="#注册机的编写" class="headerlink" title="注册机的编写"></a>注册机的编写</h4><ul><li>分析完就很简单，只要模拟一下第一个函数的过程得到的结果再去异或0x1234就可以了。代码如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1=input(&quot;请输入你的用户名: &quot;)</span><br><span class="line">list1=[]</span><br><span class="line">temp=0</span><br><span class="line">sum=0</span><br><span class="line">for i in str1:</span><br><span class="line">    list1.append(i)</span><br><span class="line">for j in list1:</span><br><span class="line">    if j&gt;&apos;Z&apos;:</span><br><span class="line">        temp=ord(j)-32</span><br><span class="line">    if j&lt;&apos;A&apos;:</span><br><span class="line">        print(&quot;输入有误！&quot;)</span><br><span class="line">    if j&gt;&apos;A&apos; and j&lt;&apos;Z&apos;:</span><br><span class="line">        temp=ord(j)</span><br><span class="line">    sum+=temp</span><br><span class="line">sum=sum^0x5678^0x1234</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ul><li>用注册机随便写个用户名输入判断。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme_test_result.jpg" alt="结果图"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;crackme-test1&quot;&gt;&lt;a href=&quot;#crackme-test1&quot; class=&quot;headerlink&quot; title=&quot;crackme_test1&quot;&gt;&lt;/a&gt;crackme_test1&lt;/h3&gt;&lt;h4 id=&quot;查壳&quot;&gt;&lt;a href=&quot;#查壳&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme18and19</title>
    <link href="http://yoursite.com/2019/10/30/160%E4%B8%AAcrackme18and19/"/>
    <id>http://yoursite.com/2019/10/30/160个crackme18and19/</id>
    <published>2019-10-29T16:00:00.000Z</published>
    <updated>2019-11-19T06:18:08.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme18"><a href="#160个crackme18" class="headerlink" title="160个crackme18"></a>160个crackme18</h3><h4 id="首先来看一下程序"><a href="#首先来看一下程序" class="headerlink" title="首先来看一下程序"></a>首先来看一下程序</h4><ul><li>程序的界面就只要输入一个注册码，所以可以直接认定是明码在程序中应该直接存在的，我们直接OD来看看程序。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme18_0.jpg" alt="程序界面"></li></ul><h4 id="OD载入程序"><a href="#OD载入程序" class="headerlink" title="OD载入程序"></a>OD载入程序</h4><ul><li><p>我们载入程序后直接来搜索字符串，找到我们刚刚看到的错误提示的字符串，然后跟进去。我们发现在错误提示上面就有一个字符串cmp的比较函数，那就可以直接推测出这个函数就是来比较输入和序列号的。再往上看就可以看到一个字符串的len函数，获得输入内容的长度，如果长度大于1就跳到比较函数那。我们直接在这个函数上下断点。当我们执行到比较函数那里时，就出现了明码也就应该是正确的序列号。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme18_1.jpg" alt="字符串比较函数"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme18_2.jpg" alt="注册码"></p></li><li><p>我们把注册码在输入到原程序中，发现正确。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme18_3.jpg" alt="结果"></p></li></ul><h3 id="160个crackme19"><a href="#160个crackme19" class="headerlink" title="160个crackme19"></a>160个crackme19</h3><h4 id="还是看一下程序"><a href="#还是看一下程序" class="headerlink" title="还是看一下程序"></a>还是看一下程序</h4><ul><li>这次的程序就多了一个输入，是典型的用户名-注册码的形式，我们直接直接用PEID来查看一下详细的信息。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_0.jpg" alt="程序界面"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_1.jpg" alt="PEID查看信息"></li><li>查看信息发现是VC6写的，这里我们可以用IDA来直接去分析比较简单和快捷。不过我在这里还是用OD来分析一下。</li></ul><h4 id="OD载入程序-1"><a href="#OD载入程序-1" class="headerlink" title="OD载入程序"></a>OD载入程序</h4><ul><li>用OD还是要先去搜索字符串向上去查找信息，我们的目标是找到注册码的生成算法。</li><li>找到了错误提示信息，跟进去在上面的代码中又发现了上一题中的正确注册码，但是在这一题中很明显是有用户名的，所以我们继续往上去找。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_2.jpg" alt="错误提示代码"></li><li>继续往上看代码，在地址为 <strong>0x401551</strong> 处我们发现了一个很常见的win32api，就是 <em>GetDlgItemTextA</em> 这个函数，而且在下面也调用了一次，就说明这里是来获得用户名和密码的，我们在此设断点来接着分析。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_3.jpg" alt="获得用户名和密码"></li><li>随便输入一个用户名和密码，我这里用户名输入的是 <strong>AAAAAAA</strong> ，我们接着单步走，之后会有一个函数来获得用户名的长度并比较长度是否小于5。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_4.jpg" alt="用户名长度判断函数"></li><li>之后如果长度符合就会跳到关键函数了，首先这个函数会调用另一个函数来获得用户名每一位的ascii值。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_5.jpg" alt="获得用户名ascii"></li><li>之后就是关键：</li></ul><ol><li>首先从[ebp-10]中获得一个值，这个值首先要加上用户名的一位ascii值（循环每一位），并且得到的结果仍然保存在[ebp-10]中。</li><li>之后设置循环次数为i（每次取一位，直到取完所有的用户名），在把循环次数左移8位，之后用[ebp-10]里的值来异或移位后的值，并把结果保存在[ebp-10]中。</li><li>把用户名的长度乘以循环次数，相当于len(用户名)* i，之后再把结果取反，之后把取反后的结果乘以i+1。最后再把[ebp-10]中的值乘以得到的结果</li></ol><ul><li>用公式来表示为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ebp-10]+=ord(username[i])</span><br><span class="line">[ebp-10]^=i&lt;&lt;8</span><br><span class="line">[ebp-10]*=(i+1)*(~(len(username)*i))</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_6.jpg" alt="算法主体"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_7.jpg" alt="初始时的栈空间"></p><ul><li>注册码的计算就是这样的，我们直接去写注册机。</li></ul><h4 id="注册机的编写"><a href="#注册机的编写" class="headerlink" title="注册机的编写"></a>注册机的编写</h4><ul><li>这里我刚开始写的犯了很大的错误，用python写的时侯一直不对，每次得到的结果都比实际答案多了几百倍，比如下图。后来我才意识到是c++的int的精度不够，但是python的精度比c++要高，所以得到的结果不正确。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_8.jpg" alt="python得到的结果"><br>之后用c写了一份得到了正确的答案，给出下面的注册代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">void test1()</span><br><span class="line">&#123;</span><br><span class="line">char name[15] = &#123;0&#125;;</span><br><span class="line">int sum1 = 0x81276345;</span><br><span class="line"></span><br><span class="line">printf(&quot;请输入你的用户名: \t&quot;);</span><br><span class="line">scanf_s(&quot;%s&quot;, name, 15);</span><br><span class="line">int strlen_1 = strlen(name);</span><br><span class="line">if (strlen_1 &lt; 5)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;输入的用户名不能小于5！&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; strlen_1; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum1 += name[i];</span><br><span class="line">sum1 ^= i &lt;&lt; 8;</span><br><span class="line">sum1 *= (i + 1) * (~(i * strlen_1));</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d \n&quot;, sum1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test1();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme19_jieguo.jpg" alt="结果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme18&quot;&gt;&lt;a href=&quot;#160个crackme18&quot; class=&quot;headerlink&quot; title=&quot;160个crackme18&quot;&gt;&lt;/a&gt;160个crackme18&lt;/h3&gt;&lt;h4 id=&quot;首先来看一下程序&quot;&gt;&lt;a href=&quot;#首
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳</title>
    <link href="http://yoursite.com/2019/10/10/%E4%BB%A5xctf%E7%9A%84%E4%B8%80%E9%81%93crackme%E6%9D%A5%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%B2%E8%AE%B2esp%E5%AE%9A%E5%BE%8B%E8%84%B1%E7%AE%80%E5%8D%95%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%A3%B3/"/>
    <id>http://yoursite.com/2019/10/10/以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳/</id>
    <published>2019-10-09T16:00:00.000Z</published>
    <updated>2020-02-09T09:48:14.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳"><a href="#以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳" class="headerlink" title="以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳"></a>以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳</h3><h4 id="首先还是查看程序的壳"><a href="#首先还是查看程序的壳" class="headerlink" title="首先还是查看程序的壳"></a>首先还是查看程序的壳</h4><ul><li>当我们用PEID来查看时，就会很明显的看到其是一个Nspack壳，这个壳大家都叫它北斗壳难度不大也是一个压缩壳可以用ESP定律来脱壳。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-1.jpg" alt="查壳的信息"></li></ul><h4 id="用ESP定律来脱一些简单的压缩壳"><a href="#用ESP定律来脱一些简单的压缩壳" class="headerlink" title="用ESP定律来脱一些简单的压缩壳"></a>用ESP定律来脱一些简单的压缩壳</h4><ul><li>我在这里，就借着这道ctf题来介绍一下ESP定律。以及怎么用ESP定律来脱简单的压缩壳。<strong>这里我推荐一下52破解基础教程里ximo脱壳教程里面的基础壳教的都挺好的</strong>。<h5 id="什么是ESP定律"><a href="#什么是ESP定律" class="headerlink" title="什么是ESP定律"></a>什么是ESP定律</h5></li><li>简单的来说ESP定律就是利用堆栈平衡来进行脱壳，加壳的程序也是必须保证外壳初始化的现场环境（）要与原程序的现场环境是一致的（主要就是 <em>esp</em> 等重要的寄存器），也就是会<strong>保护现场与恢复现场</strong> 所以常见使用<strong>pushad，popad</strong>这样两个指令，也就是我们如果用OD打开程序见到的是这样的指令就要想到要恢复堆栈。</li><li>如何来利用ESP定律来脱壳呢，就是我们OD载入程序后，先f8运行，找到使寄存器窗口中esp突变红时的esp寄存器的值下硬件断点，在f8执行，这样就会跳到一个离调用popad指令不远的地址，这条地址后应该会有重要的跳转指令（一般就只向程序的OEP）。以一个nspack壳为例子来看一下。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-2.jpg" alt="nspack2.3的入口"></li><li>看到这样的入口特征，就先f8执行一下，找到esp寄存器里的值，在数据窗口跟随。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-3.jpg" alt="要下断点的地方"></li><li>然后我们下硬件断点，然后在让程序执行。硬件断点下法就是找到要下断点的地址然后右键找到断点，断点中有右键断点选硬件访问word就行了，然后直接运行程序。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-5.jpg" alt="完成后"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-6.jpg" alt="找到OEP">。<br>不过我这里OD把代码当成了数据所以出现了很多的字符。完成后就只要dump一下就完成了脱壳.OD里有自己的dump工具我们直接使用就可以了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-7.jpg" alt="dump保存">,这样我们再去查壳就不会出现nspack的标志了，但是有的时候加壳会改我们的IAT表我们有时要自己把IAT修复。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-8.jpg" alt="脱壳完成后"></li><li>接下来我再来用esp定律脱一个最常见的压缩壳UPX壳。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/UPXke.jpg" alt="UPX壳的入口"><br>我们还是先找到esp突变的值然后下硬件断点.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/UPX%E4%B8%8B%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9.jpg" alt="下断点"><br>之后我们就直接找到oep在dump就好了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/upx-oep.jpg" alt="找到oep">，可以看到这是一个典型的delphi的程序。</li></ul><h4 id="ctf题解"><a href="#ctf题解" class="headerlink" title="ctf题解"></a>ctf题解</h4><ul><li>按照上述步骤脱完壳后，这里在打开文件发现无法运行，这里就要我们去修复IAT，使用工具ImportREC_fix_HH.exe来把IAT表修复就可以了，具体的步骤见图。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-9.jpg" alt="修复IAT"></li><li><p>之后就直接IDA分析 main函数.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-10.jpg" alt="函数主体"><br>-我们可以看到主要的判断点就是while循环中的部分，buff数组异或另一个数组，在和dword_402150[v4]一个数组的值来进行比较，我们可以看看另外两个数组的值。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-11.jpg" alt="数组值">。<br>因为是异或运算，所以我们只要让buff外的数组异或一下就可以获得buff数组的值，按照程序的代码我们写一下脚本来完成这个题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v1 = [0x12, 4, 8, 0x14, 0x24, 0x5c, 0x4a, 0x3d, 0x56, 0xa, 0x10, 0x67, 0,</span><br><span class="line">0x41, 0, 1, 0x46, 0x5a, 0x44, 0x42, 0x6e, 0x0c,</span><br><span class="line">0x44, 0x72, 0x0c, 0x0d, 0x40, 0x3e, 0x4b, 0x5f, 2, 1, 0x4c, 0x5e, </span><br><span class="line">0x5b, 0x17, 0x6e, 0xc, 0x16, 0x68, 0x5b, 0x12]</span><br><span class="line">v2=&quot;this_is_not_flag&quot;</span><br><span class="line">result=&quot;&quot;</span><br><span class="line">for i in range(0,len(v1)):</span><br><span class="line">    result+=chr(ord(v2[i%len(v2)])^v1[i])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>这里的len就是16，当时第一次写的时候没把‘t’加上直接溢出了，所以用的len（）尴尬！！！<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/xctf-jieguo.jpg" alt="附上结果"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳&quot;&gt;&lt;a href=&quot;#以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳&quot; class=&quot;headerlink&quot; title=&quot;以xctf的一道crackme来简单的讲讲esp定律
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
      <category term="脱壳" scheme="http://yoursite.com/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme-shadow</title>
    <link href="http://yoursite.com/2019/10/09/160%E4%B8%AAcrackme-shadow/"/>
    <id>http://yoursite.com/2019/10/09/160个crackme-shadow/</id>
    <published>2019-10-08T16:00:00.000Z</published>
    <updated>2019-10-09T14:00:08.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme-shadow"><a href="#160个crackme-shadow" class="headerlink" title="160个crackme-shadow"></a>160个crackme-shadow</h3><p><strong>DF-17真的帅啊，看到的瞬间我都想去造导弹了。。。。。可惜啊！！！！！！！！</strong></p><hr><ul><li>言归正传还是回到我们的crackme，这个叫shadow的我也不知道是几了，所以就直接叫名字了。<h4 id="程序初探"><a href="#程序初探" class="headerlink" title="程序初探"></a>程序初探</h4><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-1.jpg" alt="程序"></li><li>我们可以看到这是个控制台程序，再输入账号密码后就直接exit了。所以我们再用peid来查查看，虽然觉得没必要但还是要的。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-2.jpg" alt="peid信息"><br>这里我们可以看出其并没有任何的加壳信息，就是win32 console。于是我们就直接OD来分析。</li></ul><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-3.jpg" alt="程序入口"></p><ul><li>1 打开OD以后我们就能看到很多的api函数的调用，不过作者倒是给了一点提示信息:<strong>说这是一个纯汇编程序，然后还扯了一大堆没用的东西，这里我们也不要管了。</strong><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-4.jpg" alt="分析1"></li><li>2 我们用OD打开后，直接F8来让程序执行，然后我们可以看到其首先是获得用户名的长度，然后再比较用户名长度是否为空，或者是用户名长度是否超过了8，如果遇到这两种情况都直接退出。<em>程序中是把长度加2后进行比较的</em><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-5.jpg" alt="分析2"></li><li>3 之后在判断完用户名长度后，紧接着就对用户名的内容进行了判断，如果遇到 <strong>shadow，lamer，guest</strong> 中的任何一个都直接退出。</li><li>4 在之后就是获得密码长度，并且比较是否密码为空如果密码为空就直接退出。之后就是获得密码长度，以及比较不过都不是关键。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-6.jpg" alt="分析3"></li><li>5 之后就到了5个call了，但是这些函数中真正有用的其实只有一个。我们还可以观察到这五个中有两个是相同的函数可以只分析一个，所以接下来就是跟进函数内分析。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-7.jpg" alt="分析4"></li><li>6 第一个函数我们可以看到就是循环比较密码的每一位和他提供的那几个值来比较如果最后zf寄存器的值为1，那么地址[40226c]里的值标为5。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-8.jpg" alt="第一个call内容"></li><li>7 第二个函数里我们可以看到还是先循环比较密码的每一位和0的值是否相同如果有0直接就跳出call，之后就是循环比较密码的每一位和 <em>‘S’</em> 的值是否一样如果一样就让地址[40226d]里的值加一。看到这里觉得也和题目的密码生成没什么关系。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-9.jpg" alt="第二个call内容"></li><li>8 第三个函数一看就是没用的因为，其只是去比较和跳转（而且直接跳出去）根本没有对内存有任何修改，所以这个call可以直接忽略。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-10.jpg" alt="第三个call内容"></li><li>9 之后的就是重复的函数调用了，我们接着往下走。过了这几个call后就直接跳到了一个比较的地方，而且比较的正好是我们第2个call所修改的内存地址的值.可以看到他是比较那个值和4是否相等，如果相等就跳。如果不等于4就比较是否大于4，如果大于四也要跳转。这就是有两个地方要我们去判断一下那个是正确的了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-11.jpg" alt="分析5"></li><li>10 我们可以看一下那个等于4时要跳到的地址发现是try harder，那就证明是不对的，于是再去看看另一个地址<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-12.jpg" alt="等于4时的内容"><br>我们在看看另一个地址发现他并没有提示信息，于是看一下它push的内存中信息，发现了 <strong>root access……</strong> 这样几句那也就是说只要密码中多于4个”S”，就能够成功了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-13.jpg" alt="大于4的内容"></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>这题我当时也绕了几次才解决的，但是总的来说是不难的当我们看懂的时候还是很简单的，最后附上结果图<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/shadow-jieguo.jpg" alt="结果图"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme-shadow&quot;&gt;&lt;a href=&quot;#160个crackme-shadow&quot; class=&quot;headerlink&quot; title=&quot;160个crackme-shadow&quot;&gt;&lt;/a&gt;160个crackme-shadow&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme44</title>
    <link href="http://yoursite.com/2019/10/02/160%E4%B8%AAcrackme44/"/>
    <id>http://yoursite.com/2019/10/02/160个crackme44/</id>
    <published>2019-10-01T16:00:00.000Z</published>
    <updated>2019-10-08T11:36:35.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme44"><a href="#160个crackme44" class="headerlink" title="160个crackme44"></a>160个crackme44</h3><h4 id="还是先打开程序观察观察"><a href="#还是先打开程序观察观察" class="headerlink" title="还是先打开程序观察观察"></a>还是先打开程序观察观察</h4><p><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-0.jpg" alt="程序"></p><ul><li>这个程序打开一看就知道不是英文，所以也不用在乎那么多直接百度翻译查什么意思，随便输入用户名和密码后，出现一堆不认识的字符百度翻译说的是 <strong>错误不要再尝试了</strong>，哎呦这真的是瞧不起我喽。那么我们直接去搞定它！</li></ul><h4 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h4><ul><li>直接拖入peid中查看信息.<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-1.jpg" alt="查看信息"><br>看到是delphi的程序就想着直接dark神器走起，结果是dark无法对其进行解析。。。。。。。无奈只能自己去找。<br>那就先用ida添加个delphi的标签方便我们看函数,导出map文件后就直接OD来分析。</li></ul><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>打开OD这次我们就直接搜索unicode，我们可以看到那个错误提示信息的地址，于是推测上一个不认识的字符串就应该是成功的地址，于是我们直接定位到那个地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-2.jpg" alt="查unicode码"></li><li>我们往上找可以找到这个事件的入口，我们入口处设置断点然后去分析整个算法的逻辑。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-3.jpg" alt="分析"><br>这里刚开始就先获取用户名的信息，然后把大写字母的输入转成小写字母，然后获得密码。再获取完密码后有一个判断：如果用户名长度小于6，就会跳出一段不认识的字符串来告诉你小于6.之后一段就是一个switch语句的分析了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-4.jpg" alt="switch语句分析"></li><li>我们看到movzx之后就知道这个应该是循环取用户名的位数然后再把它-97后和19进行比较如果大于19就跳转。然后我们可以看到其只是对61-7A进行筛选，也就是小写字母从 <em>a-z</em> 来选。这里还有一点要注意 <strong>[ecx+edx-1]</strong>，这个地址的第一次指向不是我们认为的用户名的第一位，而是其前一个地址，恒等于0的一个byte位，之后就是大段的case分支了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-5.jpg" alt="case分支1"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-6.jpg" alt="case分支2"></li><li>这里我们可以看到其实就是作者给每一个字母都换了值，除了这些字母外其它的都是直接赋给了0x5D这个值。并且把它们的值都累加起来放在bl中，这里也要特别注意一下: <em>bl只是一个8位的寄存器只能放2个十六进制数所以不要弄错了</em>，再之后就是一个循环了我们可以看到会循环6次但是只能取到用户名的5位，这里也表明输入太长的用户名也没什么影响。我们再接着往下分析。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-7.jpg" alt="关键的地方"></li><li>这里我们看到用eax乘以0x4a7e，而eax中存放的正是用户名的长度，也就是用户名长度乘以0x4a7e，之后就是 <strong>mov al,bl</strong> 后的代码也就是把我们计算后的结果也转为10进制，之后把这两个值用 <em>“-”</em><br>连接起来，我们可以看一下栈里的内容.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-8.jpg" alt="栈内的内容"><br>这里我们就能清楚的看到了密码到底是怎样的了，于是我们就写注册机来还原一下密码生成的过程。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">list1=[0x18,0x25,0x42,0x0c,0x0d,0x6,0x36,0x2b,0x17,0x2f,0x13,0x82,0x9b,0x92,0x3,0x63,0x21,0x42,0x5c,0x29,0xc7,0x66,0x58,0x0a,0x28,0x50]</span><br><span class="line">str1=input(&quot;请输入你的用户名&quot;)</span><br><span class="line">len1=int(len(str1)*0x4a7e)</span><br><span class="line">str2=list(str1)</span><br><span class="line">for i in range(0,len(str1)):</span><br><span class="line">    if ord(str2[i])&gt;=65 and ord(str2[i])&lt;=90: #大写转小写</span><br><span class="line">        str2[i]=chr(ord(str2[i])+32)</span><br><span class="line">for i in range(0,len(str1)):</span><br><span class="line">    if ord(str2[i])&gt;=97 and ord(str2[i])&lt;=122:</span><br><span class="line">        str2[i]=ord(str2[i])-97</span><br><span class="line">    else:</span><br><span class="line">        str2[i]=0x5d</span><br><span class="line">temp =0x5d  </span><br><span class="line">for i in range(0,5):</span><br><span class="line">    if str2[i]==0x5d:</span><br><span class="line">        temp+=str2[i]</span><br><span class="line">    else:</span><br><span class="line">        temp+=list1[str2[i]]</span><br><span class="line">temp1=str(hex(temp))#得到总的值后转为16进制</span><br><span class="line">list2=list(temp1)</span><br><span class="line"># 这里我们只要byte位所以只要最后两个字符就好了</span><br><span class="line">list3=[list2[-1],list2[-2]]</span><br><span class="line">list3.reverse()</span><br><span class="line">temp2=0</span><br><span class="line">for i in range(0,len(list3)):</span><br><span class="line">    if ord(list3[i])&gt;=97 and ord(list3[i])&lt;=102:</span><br><span class="line">        list3[i]=ord(list3[i])-87</span><br><span class="line">    temp2+=int(list3[i])*pow(16,len(list3)-i-1)</span><br><span class="line">#因为不知道怎么用python直接把字符串转为16进制绕了这一大圈才完成这个转换</span><br><span class="line">print(str(temp2)+&apos;-&apos;+str(len1))</span><br></pre></td></tr></table></figure></li></ul><p>算法流程：</p><ol><li>用户名长度乘以0x4a7e</li><li>计算用户名的前5位的值的和（字母查表，其余都为0x5d），并且要加上一个0x5d的值</li><li>用“——”连接起来</li></ol><ul><li>我在写这个的时候没有判断长度的问题，自己知道长度就好了啊啊啊。但是还是要说一说 <strong>这个byte位真的很坑啊，我绕了半天才绕完</strong>，欢迎大家给出好的写法。<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4></li><li>这样下来我们就完成了，测试一下是否正确。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme44-jieguo.jpg" alt="结果图"><br>我测试了很多都是成功的，这样我们这一题就大功告成了！！！！！！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme44&quot;&gt;&lt;a href=&quot;#160个crackme44&quot; class=&quot;headerlink&quot; title=&quot;160个crackme44&quot;&gt;&lt;/a&gt;160个crackme44&lt;/h3&gt;&lt;h4 id=&quot;还是先打开程序观察观察&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CE小游戏第一关</title>
    <link href="http://yoursite.com/2019/08/11/CE%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%AC%AC%E4%B8%80%E5%85%B3/"/>
    <id>http://yoursite.com/2019/08/11/CE小游戏第一关/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2019-09-27T04:11:03.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CE小游戏第一关"><a href="#CE小游戏第一关" class="headerlink" title="CE小游戏第一关"></a>CE小游戏第一关</h3><ul><li>这次首先来讲一下CE自带的小游戏的第一关，第一关的意思就是每发射5次子弹目标就会重新恢复生命，我们要做的就是把目标击败。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-1.jpg" alt="小游戏的第一关"><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4></li><li>我们来尝试攻击目标发现其血量在依次降低，到了第五次恢复满，于是就有想法去搜索其生命值，第一次未知就搜未知的值，后面生命值减少时，搜减少的值，当生命值增加时，再去搜增加的值来锁定血量的地址。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-2.jpg" alt="初次搜索"><br>当我们第一次搜减小的值发现有很多值，于是我们还要继续这样来搜索以便减少无用的地址量。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-3.jpg" alt="第四次搜索"></li><li>当我们在搜索到第4次发现一个值只有4，很符合我们的需求，于是我们再测第五次来验证我们的想法。第五次搜索后其值更改回了100，于是我们可以确定这个地址就是我们要找的血量地址。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-4.jpg" alt="第五次搜索"></li><li>我们找到了地址以后肯定想着要去改变它的值，好让我们通关，于是我们来看看是什么地方改变其值的，<strong>ctrl+f6</strong> 走着，找到了改变其值的代码，于是我们肯定想着去更改代码。于是我们在这里进行代码注入。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-5.jpg" alt="能修改血量的代码"></li><li>我们把其值改为0，然后再去打它发现我们就已经成功了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-7.jpg" alt="代码注入修改其值"><br>于是我们就已经采用这种方法完成了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-8.jpg" alt="结果图"></li></ul><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><ul><li>我们发现我们的子弹只有五发，于是另一个想法就是我们把子弹的数量改为很多不久也可以改变其值，于是我们就顺着这个思路来做。但是再测试中我也尝试在子弹只有五发的时候来搜索5，但是顺着这个思路走，发现根本无法找到我们想要的结果，于是我就想子弹应该是存在数组中的，通过函数来减小其值，于是就有了一个想法就是数组在入栈的时候，其第一个值如array[0],应该是最靠近栈顶的，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-9.jpg" alt="简单的数组例子">,这样我们就能更加直观的体会到我们应该怎么样去查了，我们在想想假如存了5发子弹我们可以正向的记录打出的子弹，也可以记录剩下多少子弹，于是我们就猜测数组里存放的是打了几发子弹（这样便于记录）,于是我们在第一次搜索0，第二次搜索1，依次类推。以这种方式我们成功的找到子弹数量的地址，于是我们还是要再次代码注入。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-10.jpg" alt="子弹数量"></li><li>观察代码可以看出其值是每次加1，也就是说和我们猜测的一致，于是我们只要把1改为0就可以了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-11.jpg" alt="原始代码"><br>-当我们把子弹改为 <em>add 00</em> 我们便可以发现子弹的数量就不会变了，于是我们变成功了。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/ce-12.jpg" alt="结果图"><h4 id="这样我们第一关就结束了！！！！！！"><a href="#这样我们第一关就结束了！！！！！！" class="headerlink" title="这样我们第一关就结束了！！！！！！"></a>这样我们第一关就结束了！！！！！！</h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CE小游戏第一关&quot;&gt;&lt;a href=&quot;#CE小游戏第一关&quot; class=&quot;headerlink&quot; title=&quot;CE小游戏第一关&quot;&gt;&lt;/a&gt;CE小游戏第一关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这次首先来讲一下CE自带的小游戏的第一关，第一关的意思就是每发射5次子弹目标就会
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme40</title>
    <link href="http://yoursite.com/2019/05/22/160%E4%B8%AAcrackme40/"/>
    <id>http://yoursite.com/2019/05/22/160个crackme40/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2019-10-04T02:26:32.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme40"><a href="#160个crackme40" class="headerlink" title="160个crackme40"></a>160个crackme40</h3><h4 id="首先来看看这个程序"><a href="#首先来看看这个程序" class="headerlink" title="首先来看看这个程序"></a>首先来看看这个程序</h4><ul><li>这个程序的样子很普通和平常见的crackme程序没什么不同，我们随便输入用户名和密码来测试一下，那肯定是不行咯，于是我们便按照程序来解决他。吼吼吼！！！<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-03.jpg" alt="程序的样子"><h4 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h4></li><li>我们首先要去查看这个程序是否加了壳，将其拖入peid，查看发现其是delphi的程序，对于delphi的程序，我们就采用 <strong>“先darkde4查看事件的信息，在使用OD来解决”</strong> 的思路来解决，于是我们就把这个程序拖入darkde4中。 <img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-1.jpg" alt="查壳信息"></li><li>我们在 <em>过程</em> 窗口中找到了多个有用的事件最重要的就是Button1Click这个事件，这个控件应该就是和我们注册能否成功相挂钩的。于是我就想在od中直接找到这个事件来开始我们的算法分析。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-2.jpg" alt="事件信息"></li></ul><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>打开OD，我们直接跳到Buttonclick的地址来分析。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-3.jpg" alt="事件入口"></li><li>我们先大体看一下这些代码，大概在离入口不远的地址就有了对注册信息的判断，看来这个程序的注册过程一定不是很复杂，那么我们就一步步来分析。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-4.jpg" alt="判断图"></li><li><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-5.jpg" alt="分析1"><br>这些代码就是判断用户名和密码是否为空，如果有一个为空就结束并且弹出对话框提示有一项为空。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme-6.jpg" alt="关键的代码"><br>这一段循环就是生成密码的过程，就是 <em>循环取用户名的ascii值并且每次都加5并把值放在[ebp-4]的地址中</em> 并且这个过程完成后就直接到了判断的地方，也就是说密码就是很简单的过程啊啊啊。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-7.jpg" alt="栈里存储的密码"></li></ul><h4 id="注册机的编写"><a href="#注册机的编写" class="headerlink" title="注册机的编写"></a>注册机的编写</h4><ul><li>既然都知道了算法并且如此的简单，于是我便随便写了一个python脚本来解决它。代码如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while 1:</span><br><span class="line">    str1=input(&quot;请输入你的用户名&quot;)</span><br><span class="line">    str2=[]</span><br><span class="line">    str3=[]</span><br><span class="line">    for i in range(0,len(str1)):</span><br><span class="line">        temp=ord(str1[i])+5</span><br><span class="line">        str2.append(temp)</span><br><span class="line">    for i in str2:</span><br><span class="line">        str3.append(chr(i))</span><br><span class="line">    str4=&apos;&apos;.join(str3)</span><br><span class="line">    print(str4)</span><br></pre></td></tr></table></figure></li></ul><p>最后附上一个我们的结果图:<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-8.jpg" alt="结果"><br>注: <strong>要注意当你的用户名有z的时候加五之后其ascii的值表示为删除，所以这一题中还是尽量不要出现z为好</strong><br> 当你按照这个打的时候很可能出错！！！！！！！但是这不是你注册机编写的错误！！！！！！！<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme40-9.jpg" alt="当用户名中出现了&quot;z&quot;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme40&quot;&gt;&lt;a href=&quot;#160个crackme40&quot; class=&quot;headerlink&quot; title=&quot;160个crackme40&quot;&gt;&lt;/a&gt;160个crackme40&lt;/h3&gt;&lt;h4 id=&quot;首先来看看这个程序&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme04</title>
    <link href="http://yoursite.com/2019/05/11/160%E4%B8%AAcrackme04/"/>
    <id>http://yoursite.com/2019/05/11/160个crackme04/</id>
    <published>2019-05-10T16:00:00.000Z</published>
    <updated>2019-10-07T11:08:19.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme04"><a href="#160个crackme04" class="headerlink" title="160个crackme04"></a>160个crackme04</h3><h4 id="首先来看看程序"><a href="#首先来看看程序" class="headerlink" title="首先来看看程序"></a>首先来看看程序</h4><ul><li>当我们打开这个程序时会发现这个注册过程和其他的都不太一样，它少了 <em>确定键</em>，但是本着尝试的态度，我还是随便输入一些来测试一下。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme04-1.jpg" alt="程序本身"><br>我们发现无法点击底下那块灰色的控件，于是只能按步骤先去查壳喽。</li></ul><h4 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h4><ul><li>把程序拖入peid查看其信息，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme04-02.jpg" alt="peid查看信息"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme04-3.jpg" alt="darkde4查看到的信息"></li><li>发现其为delphi程序，于是我们接下来就直接只用darkde4这个delphi神器来进一步的查看信息。我们可以看到那个我们无法点击的控件，是一个panel控件，而且有作者提示说注册成功会出现朱茵小姐的照片。之后我们再看一看事件。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme4-4.jpg" alt="事件信息"><br>在事件中我们能注意到几个关键的地方，一个是chkcode我认为是检查密码是否相同的，应该是重点。还有两个是 <strong>paneldoubleclick</strong> 另一个是 <strong>panelclick</strong> 这两个一个是 <em>double</em> 另一个就是单个的，推测是点击那个panel控件的次数来判断的.于是我们od来分析。</li></ul><h4 id="算法的分析"><a href="#算法的分析" class="headerlink" title="算法的分析"></a>算法的分析</h4><ul><li>打开od找到chkcode的地址来开始分析，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme4-5.jpg" alt="入口"><br>在进入函数前看到一串字符很有意思，但是也不知道有什么用总觉得和密码应该有关，先不管了，开始分析函数。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme04-8.jpg" alt="具体的分析"><br>在这次的分析中，首先是要把用户名长度加上5，然后的会有一个 <em>push dword ptr[ebx+314]</em>  起先没注意但是后来发现就是刚才那个有趣的字符串，之后的一个 <em>lea</em> 指令很可疑，因为它把一个带中文的字符串地址给了 <em>eax</em> 于是我们跟进这个函数，发现这个函数就是把那些字符串拼接在一起。我们可以在下图中看到拼接完后的字符串的结果。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme4-7.jpg" alt="函数里面的处理"></li><li>既然是chkcode那一定是来检验的后面的代码可以分析完，就是来检验和之前获得那个拼接字符串是否相同。于是我们可以大胆猜测，密码就是这个拼接字符串。</li><li>拼接字符串的生成构成大概就是：</li></ul><ol><li>先是一个带中文的字符串 <em>黑头Sun Bird</em></li><li>把用户名长度加上5</li><li>在放入字符串 <em>dseloffc-012-OK</em></li><li>在加上用户名</li></ol><ul><li>既然这样直接写一个注册机来试试,很简单</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(True):</span><br><span class="line">    str1=input(&quot;输入你的用户名:&quot;)</span><br><span class="line">    lens=len(str1)+5</span><br><span class="line">    passw=&quot;黑头Sun Bird&quot;+str(lens)+&quot;dseloffc-012-OK&quot;+str1</span><br><span class="line">    print(passw)</span><br></pre></td></tr></table></figure><ul><li>但是按照我们的设想就是输入完密码在双击在单击就可以了 于是我们尝试尝试。结果成功了，也就是说真如我们想的一样，不过在输入完密码后，要动一下键盘因为那个keyup要触发一下键盘的。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/crackme4-9.jpg" alt="结果图"><br><strong>漂亮的朱茵小姐就出现了 开心！！！！！</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme04&quot;&gt;&lt;a href=&quot;#160个crackme04&quot; class=&quot;headerlink&quot; title=&quot;160个crackme04&quot;&gt;&lt;/a&gt;160个crackme04&lt;/h3&gt;&lt;h4 id=&quot;首先来看看程序&quot;&gt;&lt;a href=&quot;#首先
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>160个crackme02</title>
    <link href="http://yoursite.com/2019/04/11/160%E4%B8%AAcrackme02/"/>
    <id>http://yoursite.com/2019/04/11/160个crackme02/</id>
    <published>2019-04-10T16:00:00.000Z</published>
    <updated>2019-09-27T02:11:37.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="160个crackme02"><a href="#160个crackme02" class="headerlink" title="160个crackme02"></a>160个crackme02</h3><p> 1.首先来尝试爆破</p><ul><li>首先直接打开这个小程序随便输入一个账号和密码，来尝试一下是什么效果：<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/7.jpg" alt="图片"><br>我们通过输入可以看出来会有弹窗，这样我们就可以用OD的插件来去搜索字符串，找到地址来具体分析，之后我们打开OD<br>来用插件查看其地址.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/8.jpg" alt="地址信息"> 我们进入去分析，我们看到了前面有一个je，并且跳转地址是判断错误的地方，断定这个地方就是关键跳转点。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/9.jpg" alt="关键跳转点">,于是我们就可以通过把ZF的值改变，来爆破。也可以nop填充来爆破。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/10.jpg" alt="修改后的结果"><br>当然这只是第一步，下面就来对密码生成的算法来尝试破解</li></ul><p> 2.破解密码生成的算法</p><ul><li><p>我们这里就要从头开始分析，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/11.jpg" alt="分析"><br>第一个函数，是来获得你输入账号的长度。再用其长度<em>0x17CFB.<br>第二个函数，是获得你输入账号的第一个字符的ascii码的值，然后，再把值和上一步得到的结果相加。后面的汇编很长，在这里还有一个是把“AKA-”这个前缀给了密码。<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/13.jpg" alt="密码前缀"><br>但是都不是检查输入的密码和生成密码是否相同的，我们要去找到一个比较两者是否相同的函数.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/12.jpg" alt="比较函数"><br>从这个地方看到一个cmp的函数推测是来比较密码是否一致的，我们下一个断点，F7跟进一下。我们可以看到在函数中就有了密码的比较，<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/14.jpg" alt="比较函数内部"><br>在这个栈中可以清楚的看到两个密码，于是可以断定密码的生成方法就是: **AKA-长度</em>0x17CFB+账号的第一个字符的ascii码的值**<br>然后写一个简单python脚本来实现此过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1=input(&quot;输入一个字符串&quot;)</span><br><span class="line">pass1 =len(str1)*0x17CFB</span><br><span class="line">pass2=ord(str1[0])+pass1</span><br><span class="line">pass3=&quot;AKA-&quot;+str(pass2)</span><br><span class="line">print(pass3)</span><br></pre></td></tr></table></figure></li><li><p>然后我们来测试一下是否正确:<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/15.jpg" alt="测试结果图"><br>到此为止就已经完成了crackme02！！！</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;160个crackme02&quot;&gt;&lt;a href=&quot;#160个crackme02&quot; class=&quot;headerlink&quot; title=&quot;160个crackme02&quot;&gt;&lt;/a&gt;160个crackme02&lt;/h3&gt;&lt;p&gt; 1.首先来尝试爆破&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="破解基础" scheme="http://yoursite.com/tags/%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习1</title>
    <link href="http://yoursite.com/2019/02/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1/"/>
    <id>http://yoursite.com/2019/02/06/正则表达式1/</id>
    <published>2019-02-05T16:00:00.000Z</published>
    <updated>2019-03-16T15:40:19.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式的初步学习"><a href="#正则表达式的初步学习" class="headerlink" title="正则表达式的初步学习"></a>正则表达式的初步学习</h3><p>第一次接触正则是在大二的时候，现在长时间不使用，有些概念比较模糊，因此准备重拾一下自己的知识。</p><hr><hr><ol><li><p>正则表达式是什么？</p><ul><li>正则表达式<em>在菜鸟教程中的概念如下</em>：<blockquote><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p></blockquote></li><li>我的个人理解就是来对文本进行匹配的。</li></ul></li><li><p>正则表达式的基础规则：</p><ul><li>位置标记： <strong>位置标记锚点</strong>是表识字符串位置的正则表达式。</li></ul></li></ol><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:left">^</td><td style="text-align:left">指定了匹配正则表达式的文本必须始于字符串的首部</td><td style="text-align:center">^zxc可匹配以zxc为首的行</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">指定了匹配正则表达式的文本必须始于字符串的尾部</td><td style="text-align:center">zxc$可匹配以zxc结尾的行</td></tr></tbody></table><ul><li>标识符: <strong>标识符是正则表达式的基础部分</strong></li></ul><table><thead><tr><th style="text-align:center">正则表达式</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配任意一个字符</td><td style="text-align:center">asq.可以匹配asq1或者asqe 但是不能匹配asqer 其只能匹配单个的字符</td></tr><tr><td style="text-align:center">[ ]</td><td style="text-align:center">匹配括号中的任意一个字符，中括号内可以为字符组或者字符范围</td><td style="text-align:center">par[kj]可以匹配park或者parj ,[0-9]可以匹配任意的单个数字</td></tr><tr><td style="text-align:center">[ ^ ]</td><td style="text-align:center">匹配不在中括号中的任意一个字符</td><td style="text-align:center">这个就比较好理解如 9[^12]就不能匹配91 或者 92</td></tr></tbody></table><ul><li>数量修饰符:  <strong>数量修饰符定义了模式可出现的次数</strong></li></ul><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:right">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:left">?</td><td style="text-align:right">只能够匹配之前的项1次或者0次</td><td style="text-align:center">courl?可以匹配courl 或者是cour</td></tr><tr><td style="text-align:left">+</td><td style="text-align:right">匹配之前的一项1次或者多次</td><td style="text-align:center">courl+ 可以匹配courl或者 courll 等等</td></tr><tr><td style="text-align:left">*</td><td style="text-align:right">可以匹配之前的一项0次或者多次</td><td style="text-align:center">c * ourl可以匹配 courl或者ccourl或者是ourl 等等</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:right">匹配之前的项n次</td><td style="text-align:center">如[0-9]{2} 能够匹配任意的两位数</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:right">之前的项至少要匹配n次</td><td style="text-align:center">如[0-9]{4}能够匹配任意一个4位数或者更多位的数字</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:right">之前的项匹配的最小次数与最多次数</td><td style="text-align:center">[0-9]{2,5}匹配两位数到五位数之前的任何数字</td></tr></tbody></table><hr><p>正则表达式的基本规则大概就是这些，之后会给出如何匹配出你想要得到的数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正则表达式的初步学习&quot;&gt;&lt;a href=&quot;#正则表达式的初步学习&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的初步学习&quot;&gt;&lt;/a&gt;正则表达式的初步学习&lt;/h3&gt;&lt;p&gt;第一次接触正则是在大二的时候，现在长时间不使用，有些概念比较模糊，因此准备重
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="正则表达式学习" scheme="http://yoursite.com/categories/Hexo/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="正则表达式学习" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CE的基础练习</title>
    <link href="http://yoursite.com/2019/02/06/CE%E7%9A%84%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/02/06/CE的基础练习/</id>
    <published>2019-02-05T16:00:00.000Z</published>
    <updated>2019-09-25T14:46:52.770Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CE的基础练习"><a href="#CE的基础练习" class="headerlink" title="CE的基础练习"></a>CE的基础练习</h3><ul><li>首先，CE就是cheat engine就是作弊引擎，我也是看了吾爱破解的大佬的相关文章之后也觉得记录一下自己的学习过程。附上大佬的帖子链接<a href="https://www.52pojie.cn/thread-691615-1-1.html#18713591_ce-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">吾爱破解CE链接</a></li><li>接下来，我们就直接开始做做CE提供的基础题，我这里用的CE是中文版的，大家也可以直接在我爱破解上下载，或者用我在这里给的链接<a href="https://pan.baidu.com/s/1-tqv2A-dNmQc6XVcAWQCMA" target="_blank" rel="noopener">CE中文版</a>,提取码是:<strong>0o2z</strong><br>不过下载完解压完之后还不是中文版，大家要自己在setting选项上选择中文。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-02-16.jpg" alt="设置语言"></li><li>接下来就要开始CE的基础使用了，CE自己提供了一个内置的小学习程序挺有趣的教学内容，我们就一题一题的往下做。<ol><li>首先第一题，CE的这个小练习，在帮助栏里可以找到。那第一题的要求是这样的<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-08-22.jpg" alt="第一题">,<em>就是要我们把生命值改为1000</em>，而且提示里说用精确数值扫描，所以我们就顺着题目的要求来找到地址，修改值即可。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-13-31.jpg" alt="CE的基本使用"><br>首先我们先要把进程加载到CE中，然后我们用精确数值扫描。我们知道刚刚开始时，生命是100，所以我们首先来搜100，就是用默认的4字节的方式就可以。第一次扫描会有很多的值，所以我们要进行筛选。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-19-14.jpg" alt="第一次搜索的结果">我们点击 <strong>“打我”</strong>，可以看到我们的生命减一点变为了98，于是我们再去搜索98，就这样持续下去可以定位到改变生命的地址.我们双击那个唯一的地址，把他加入到地址列表中，修改值为1000。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-20-06.jpg" alt="修改结果">，这样我们就可以回到那个小测试上，发现已经可以点击下一步了，第一题就结束了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-27-15.jpg" alt="结果图"></li><li>接着就开始做第二个题目，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-29-01.jpg" alt="第二题">第二个题目就是说是未知大小的值，因为我们看不到我们的生命值，于是我们可以使用CE的未知值来先搜索，我们在扫描类型中选择 <strong>未知的初始值</strong><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-34-00.jpg" alt="扫描类型"> 然后开始扫描,可以看到扫描结果很大，连地址都没有出现，但是我们可以想象到应该通过血量的变化来锁定地址，在小程序中点击打我，可以看到生命值减小了，于是我们在接着搜 <strong>减少的数值</strong>那一项*<em>,<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-39-00.jpg" alt="减少的数值">可以看到地址减少了很多，于是还是继续上述的打我-搜减小的数值,得到如下的结果<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-43-14.jpg" alt="锁定地址">,结合提示信息知道血量在 </em>0-500* 之间于是我们找到地址直接改为5000结束。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-48-26.jpg" alt="结果"></li><li>第三题是关于浮点数，单双精度的问题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-53-45.jpg" alt="题目">这两个算是很简单的了，直接在搜索中选择确定的值，在 <strong>数值类型</strong> 中选择单浮点和多浮点然后再按照上两题那样的方法，来锁定地址就可以过关了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-57-50.jpg" alt="修改图"></li><li>第四题的题目，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_20-59-58.jpg" alt="题目">本题就是要我们来修改代码来使当我们点击 <strong>改变数值</strong> 时值不改变，那我们还是要先找到变动数值的地址，方法和上面几题一样。然后我们选中地址右键选择 <strong>找出是什么改变了地址</strong> 这一项或者直接 <strong>Ctrl+F6</strong>,然后我们会看到这样一个小窗口，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-12-11.jpg" alt="窗口">,然后我们回到小程序的界面点击改变数值，可以发现其中已经有汇编代码了，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-16-13.jpg" alt="如图">,这里我们直接把它nop掉，或者注释掉都可以实现我们的目的，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-19-21.jpg" alt="NOP掉">，这样就ok了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-22-07.jpg" alt="结果"></li><li>第五题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-22-07.jpg" alt="题目">,这个题目就是去学着去找基址，首先要做的还是锁定数值的地址，方法和上述题目一样。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_21-35-52.jpg" alt="找到地址">，锁定了之后看他题目的描述，就是找到指针，那我们还是Ctrl+f6走起，来看看什么能改变这个地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-15-33.jpg" alt="详细信息图">，我们可以看到一个很符合指针特征的汇编代码就是<code>MOV [edx],eax</code>这个是典型的指针变量的特征。前面肯定有取址的指令。如果有没有学过c语言的人可能不知道为什么这符合指针的特征，我们就用一个例子来解释一下。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-21-55.jpg" alt="指针的反汇编">,我们可以在VC6的反汇编窗口看到，编译器处理指针时，首先取地址，把地址值传给寄存器，在把寄存器的值传给指针变量，当然这是debug版的。为什么不把地址直接传给指针变量呢（mov指令的使用规则，两个内存不能用mov指令）。这样我们知道指针的特征后，这个题目就很好解决了我们找到了一个地址这个地址是存放在指针里的，在去找一下那个指针的地址，我们只要在去搜一下这个地址即可<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-34-46.jpg" alt="找到基址">，这样我们手动添加到地址栏<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-38-40.jpg" alt="手动添加地址">，我们这里的偏移为0，也很容易理解毕竟只是 <strong>[edx]</strong> 没有偏移。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-41-01.jpg" alt="点一下激活">然后我们找到基址后修改值为5000后点击改变指针就成功完成了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-24_23-41-44.jpg" alt="结果图"></li><li>第六题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-28-06.jpg" alt="题目">，这一题就是要我们通过修改代码来实现点一下 <em>打我</em> 加两滴血的操作，当然第一步还是先找到血量的地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-31-25.jpg" alt="地址的值">找到地址后我们就要去看看是哪个地方改变了这个值,<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-33-14.jpg" alt="血量的变化操作">,注意到的操作是<code>sub dword ptr [],01</code>于是我们知道血量的操作是每次减一，我们只要改成 <code>add dword ptr[],02</code>，就可以了我们只要用CE<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-37-59.jpg" alt="自动汇编">，进入自动汇编后选择代码注入<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-39-43.jpg" alt="代码注入">，地址就是在默认的那个点击确定后，出现代码<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-41-16.jpg" alt="代码">，然后按照我的想法修改sub为add后的代码<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-43-37.jpg" alt="修改后的代码">后再去小程序中点击打我会发现开始加血了，于是本题也就成功了。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-45-25.jpg" alt="结果"></li><li>第七题，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-47-07.jpg" alt="题目">，多级指针这可能是初学c语言的同学最头疼的地方，题目中给出的是一个4级指针，我们不妨在c语言里给出一个四级指针来演示一下过程，好让初学者更好的理解多级指针。首先以2级指针为例，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_20-55-14.jpg" alt="二级指针的指向问题">，这就很容易理解2级指针里存放的是一级指针的地址，那么如果是4级指针就是存放3级指针的地址，我们来看一下，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-01-16.jpg" alt="4级指针的结果">从图中可以看出对于4级指针它就是存放的3级指针的地址，层层递进的关系。于是我们在来看题目，还是先找到最初的血量地址，方法雷同，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-05-23.jpg" alt="最初的地址">，找到之后我们还是查看什么改变了这个地址，我们可以看到那个代码符合指针的特征<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-07-20.jpg" alt="第一个地址"><code>[esi+18]</code>注意这里的18是偏移量，于是我们把 <em>01936a80</em> 放入搜索栏中得到了一个新的地址，我们还是顺着上面的思路不过这次不要选什么改变了，选什么访问了地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-11-03.jpg" alt="地址2">，然后我们发现怎么地址是一样的呢，<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-45-36.jpg" alt="寻找地址">，我的想法就是因为我们得到的地址是加了偏移的地址(在结果栏显示的地址，但是这里没有偏移也就是说我们定位的地址就是其指针的地址)这里引用一个大佬的话 <em>CE 默认使用硬件断点的方式，断点只能停在指令执行之后，而这条指令正好是把 esi 原来指向的地址中的值再赋值给 esi，所以执行之后 esi 的值已经是被覆盖掉的值了，而我们想知道的恰恰是执行这条指令之前的 esi 值，那么怎么办呢</em>，我们发现有一个地址是指向这个地址的于是我想看看是不是这个地址就是上一个指针的地址于是怀着试试看的想法我搜了一下地址，结果发现点击改变数值，确实发生了变化，于是锁定了地址。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-55-24.jpg" alt="地址">，然后发现这一个的偏移是0x14，于是接着搜地址，这次的地址偏移是0x0c下一次按照提示就应该是基址了<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_21-57-55.jpg" alt="地址">，于是我们再接着搜地址，就是搜地址找到基址为止！，于是我们终于找到了基址！！！ <img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-03-01.jpg" alt="基址地址">,这样一来剩下的就只要手动加地址，修改值就OK了。再按照我们刚刚讲解的四级指针的运作流程填偏移就很简单了<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/blob/raw/image/Snipaste_2019-09-25_22-07-20.jpg" alt="填偏移地址">，然后我们在锁定一下，再去改值就ok了.<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-10-55.jpg" alt="结果"></li><li>第8题 题目<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-14-54.jpg" alt="题目">，这题很好玩就是模拟对打要求就是你要获胜但是不能够锁定生命值，在这道题里生命值为单浮点类型。我的想法就是先找到血量的地址，再通过代码注入来修改生命值获得胜利，我们首先来找我们自己人的生命地址<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-21-52.jpg" alt="生命地址">，我们在地址栏点击我们选中的地址在选择 <strong>浏览相关内存区域</strong>,可以看到在18e00b0处有一个01的标识，可以猜测是否为组队信息，于是我们接着找队友eric与对手HAL的标识来确认我们的新想法。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-29-37.jpg" alt="队友标识"><br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-29-18.jpg" alt="对手标识">，对比可以看到一个的标识是01，另一个是02这也确定了我们的想法，于是我们就这此处注入代码<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-40-35.jpg" alt="注入的代码">。结果就是不会改变我方的值，只有敌人的血量变化。<img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/Snipaste_2019-09-25_22-42-55.jpg" alt="结果">，我们点击重启游戏并且执行后发现，我们成功了 ！！！！<br>到这里基础的内容CE内容就结束了，CE后面还自带了几个好玩的小游戏的练习后面也会做出来玩玩。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CE的基础练习&quot;&gt;&lt;a href=&quot;#CE的基础练习&quot; class=&quot;headerlink&quot; title=&quot;CE的基础练习&quot;&gt;&lt;/a&gt;CE的基础练习&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先，CE就是cheat engine就是作弊引擎，我也是看了吾爱破解的大佬的相关文章之
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="Cheat Engine" scheme="http://yoursite.com/categories/Hexo/Cheat-Engine/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Cheat Engine" scheme="http://yoursite.com/tags/Cheat-Engine/"/>
    
  </entry>
  
  <entry>
    <title>xpath中常用语法</title>
    <link href="http://yoursite.com/2019/02/04/xpath%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/04/xpath常用语法总结/</id>
    <published>2019-02-03T16:00:00.000Z</published>
    <updated>2019-04-09T14:50:06.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xpath常用语法"><a href="#xpath常用语法" class="headerlink" title="xpath常用语法"></a>xpath常用语法</h3><ol><li>xpath是一门在XML文档中查—<br>title:  正则表达式学习1</li></ol><p>date: 2019-02-06<br>tags:</p><ul><li>Hexo</li><li>正则表达式学习<br>categories:</li><li>Hexo</li><li>正则表达式学习</li></ul><p>—找信息的语言，在爬虫中常用来查找信息，因此掌握其语法，可以帮助我们很好的去查找想要获得的信息。</p><h5 id="如何来进行节点的选择"><a href="#如何来进行节点的选择" class="headerlink" title="如何来进行节点的选择"></a>如何来进行节点的选择</h5><ol><li><p>选择一个<strong>适当的节点</strong>，对于找寻信息至关重要。往往一个/或者//的选取会得到不同的信息，而且可能和你想像的相差甚远。接下来，就来说明几个重要的概念。</p></li><li><p>父节点与子节点:</p><ul><li>如下图所示:<br><img src="https://raw.githubusercontent.com/zxcpaozxc/zxcpaozxc.github.io/master/image/2.jpg" alt="xpath">的解释一样。</li></ul></li><li><p>下面来具体的讲讲如何来选取节点:</p><ul><li>xpath使用路径表达式在XML文档中选择节点的，节点是沿着路径或者step来选取的.</li></ul></li></ol><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>/</td><td>从根节点来选取</td></tr><tr><td>//</td><td>从当前节点进行选取，不考虑其位置</td></tr><tr><td>@</td><td>选取属性</td></tr><tr><td>.</td><td>选取当前节点</td></tr></tbody></table><ul><li>以一个例子来实际操作一下:<br><img src="https://raw.githubusercontent.com/zxcpaozxc/zxcpaozxc.github.io/master/image/3.jpg" alt="豆瓣电影title"><br>先选取其父节点，然后依次来找出信息所在位置的节点信息，最后获得其内容<br>当然，一般浏览器都可以自动获得xpath，但是还是有必要学习一下，以此为例子，我们能够看出来实际中如何取操作这些节点来得到我们想要得到的消息.</li></ul><h4 id="最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath-helper"><a href="#最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath-helper" class="headerlink" title="最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath helper"></a>最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做<strong>xpath helper</strong></h4><hr><p><strong><em>前提是你可以科学上网</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;xpath常用语法&quot;&gt;&lt;a href=&quot;#xpath常用语法&quot; class=&quot;headerlink&quot; title=&quot;xpath常用语法&quot;&gt;&lt;/a&gt;xpath常用语法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;xpath是一门在XML文档中查—&lt;br&gt;title:  正则表达式学习
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/Hexo/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>用lxml与requests模块爬取起点中文网的免费阅读列表</title>
    <link href="http://yoursite.com/2019/02/03/%E7%94%A8python%E4%B8%AD%E7%9A%84lxml%E6%A8%A1%E5%9D%97%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E7%BD%91%E5%85%8D%E8%B4%B9%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/02/03/用python中的lxml模块爬取起点网免费阅读列表/</id>
    <published>2019-02-02T16:00:00.000Z</published>
    <updated>2019-03-10T03:35:57.332Z</updated>
    
    <content type="html"><![CDATA[<h5 id="用lxml与requests模块爬取起点中文网的免费阅读列表"><a href="#用lxml与requests模块爬取起点中文网的免费阅读列表" class="headerlink" title="用lxml与requests模块爬取起点中文网的免费阅读列表"></a>用lxml与requests模块爬取起点中文网的免费阅读列表</h5><p><strong>爬取的思路:</strong></p><ul><li><p>首先来讲,爬取内容并非是最重要的,我个人认为要先知道思路,然后再去写代码,就会容易很多。</p></li><li><p>再就来说说，要写这个爬虫的思路:</p><ul><li><p>首先，应该先看看网站的robots.txt文件，来看一下网站上什么内容可以，让我们去爬取,这里附上其内容，可以看到起点是应该全都可让我们去爬的，然后放心的去写代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> User-Agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /*.css</span><br><span class="line">Allow: /*.js</span><br></pre></td></tr></table></figure></li><li><p>接下来，就是要获得其URL资源，注意到起点网上的free区的URL是如下的，然后我们尝试着去删除一些无用的信息，来简化URL,来获得同样的页面。<br><code>https://www.qidian.com/free/all?orderId=&amp;vip=hidden&amp;style=1&amp;pageSize=20&amp;siteid=1&amp;pubflag=0&amp;hiddenField=1&amp;page=2</code><br>通过尝试我们只要留下 <em>all?page=2</em> 这一部分就可以获得我们想要的结果。于是修改URL为<code>https://www.qidian.com/free/all?page={}</code>这样可以通过<em>format()</em> 方法来构造我们要爬取多少页。</p></li><li><p>下一步，就要去构造xpath，来获得数据,在chrome浏览器中按<strong>F12</strong>来查看网页的源码，接着我们就要去找到信息的位置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;book-mid-info&quot;&gt;</span><br><span class="line">                          &lt;h4&gt;&lt;a href=&quot;//book.qidian.com/info/1010741811&quot; target=&quot;_blank&quot; data-eid=&quot;qd_E05&quot; data-bid=&quot;1010741811&quot;&gt;大劫主&lt;/a&gt;&lt;/h4&gt;</span><br></pre></td></tr></table></figure></li></ul><p>对于此xml的节点，我们要得到一个book的名字就只要用<strong>etree下的xpath方法</strong>，<br>就可以得到想要的信息。代码如下：<code>xpath(&quot;//div[@class=&#39;book-img-text&#39;]//h4//a/text()&quot;)</code>这样就可以得到我们想要的数据了。但是有的地方可能有”\r”或者是空格只要用replace()方法替代一下就可以了。</p></li></ul><h5 id="最后附上全部的代码："><a href="#最后附上全部的代码：" class="headerlink" title="最后附上全部的代码："></a>最后附上全部的代码：</h5><p>附:爬取的结果图：<br><img src="https://github.com/zxcpaozxc/zxcpaozxc.github.io/raw/master/image/1.jpg" alt="结果"><br><em>这样就可以基本上爬到想要的信息了</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">class qidian:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers =&#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&quot;&#125;</span><br><span class="line">        self.start_url=&quot;https://www.qidian.com/free/all?page=&#123;&#125;&quot;</span><br><span class="line"></span><br><span class="line">    def get_free_url_List(self):</span><br><span class="line">        return [self.start_url.format(i) for i in range(1,120)]</span><br><span class="line"></span><br><span class="line">    def parse_url(self,url):</span><br><span class="line">        response=requests.get(url,headers=self.headers)</span><br><span class="line">        return response.content</span><br><span class="line"></span><br><span class="line">    def get_url_list(self,html_url):</span><br><span class="line">        html=etree.HTML(html_url)</span><br><span class="line">        div_lists=html.xpath(&quot;//div[@class=&apos;all-book-list&apos;]&quot;)</span><br><span class="line">        content_list=[]</span><br><span class="line">        for div in div_lists:</span><br><span class="line">            item=&#123;&#125;</span><br><span class="line">            item[&quot;title&quot;]=div.xpath(&quot;.//h4/a/text()&quot;)</span><br><span class="line">            item[&quot;title&quot;]=item[&quot;title&quot;][0] if len(item[&quot;title&quot;][0])&gt;0 else None</span><br><span class="line">            item[&quot;author&quot;]=div.xpath(&quot;.//p[@class=&apos;author&apos;]//a[@class=&apos;name&apos;]/text()&quot;)</span><br><span class="line">            item[&quot;author&quot;]=item[&quot;author&quot;][0] if len(item[&quot;author&quot;][0])&gt;0 else None</span><br><span class="line">            item[&quot;content-sum&quot;]=div.xpath(&quot;.//p[@class=&apos;intro&apos;]/text()&quot;)</span><br><span class="line">            item[&quot;content-sum&quot;]=[div.replace(&quot;\r&quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]]</span><br><span class="line">            item[&quot;content-sum&quot;]=[div.replace(&quot; &quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]]</span><br><span class="line">            item[&quot;href&quot;]=&quot;https:&quot;+div.xpath(&quot;.//h4/a/@href&quot;)[0] if len(div.xpath(&quot;.//h4/a/@href&quot;)[0])&gt;0 else None</span><br><span class="line">            item[&quot;img&quot;]=&quot;https:&quot;+div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0] if len(div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0])&gt;0 else None</span><br><span class="line">            content_list.append(item)</span><br><span class="line">        return content_list</span><br><span class="line"></span><br><span class="line">    def save_content(self,content_list):</span><br><span class="line">        with open(&quot;起点中文网免费文章1.txt&quot;,&quot;a&quot;,encoding=&apos;utf-8&apos; ) as f:</span><br><span class="line">            for i in content_list:</span><br><span class="line">                 f.write(json.dumps(i, ensure_ascii=False))</span><br><span class="line">                 f.write(&quot;\n&quot;)  # 写入换行符，进行换行     </span><br><span class="line">        print(&quot;保存成功！&quot;)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        # 发送请求，获得响应</span><br><span class="line">        # 接收数据，并处理数据</span><br><span class="line">        # 保存数据</span><br><span class="line">        url_list=self.get_free_url_List()</span><br><span class="line">        for url in url_list:</span><br><span class="line">            html_url=self.parse_url(url)</span><br><span class="line">            content_list=self.get_url_list(html_url)</span><br><span class="line">            self.save_content(content_list)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    spider_qidian=qidian()</span><br><span class="line">    spider_qidian.run()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;用lxml与requests模块爬取起点中文网的免费阅读列表&quot;&gt;&lt;a href=&quot;#用lxml与requests模块爬取起点中文网的免费阅读列表&quot; class=&quot;headerlink&quot; title=&quot;用lxml与requests模块爬取起点中文网的免费阅读列表&quot;&gt;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/Hexo/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python导入lxml中的etree模块</title>
    <link href="http://yoursite.com/2019/02/01/lxml%E6%A8%A1%E5%9D%97%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/02/01/lxml模块的下载/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-03-09T03:52:46.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python导入lxml中的etree模块"><a href="#python导入lxml中的etree模块" class="headerlink" title="python导入lxml中的etree模块"></a>python导入lxml中的etree模块</h2><ul><li><p>首先，使用pycharm中自带的下载器，下载的是不带etree模块的</p></li><li><p>再一点就是，看网上说<em>部分lxml版本是不含etree模块的</em>应该去找能和自己python版本兼容而且有etree模块的lxml版本</p></li><li><p>可以去官网上下载自己想要的版本<br>官网可用版本链接 <a href="https://pypi.org/project/lxml/3.7.2/#files" target="_blank" rel="noopener">官网</a></p></li></ul><h4 id="如何去安装lxml模块"><a href="#如何去安装lxml模块" class="headerlink" title="如何去安装lxml模块"></a>如何去安装lxml模块</h4><ul><li><p>下载好这样一个文件:<strong>lxml-3.7.2-cp36-cp36m-win32.whl</strong> 后在cmd中用</p><p> <code>pip install lxml-3.7.2-cp36-cp36m-win32.whl</code></p></li><li><p>看提示安装完成后，在cmd中测试查看是否可以使用etree模块,就是进入<em>python</em>,导入<em>etree</em>模块:<code>from lxml import etree</code>,若不报错，说明成功，否则就要检查是哪里出现了问题</p></li><li><p><strong>注意命名文件时不要和这些模块重名，这样也会导入不成功</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python导入lxml中的etree模块&quot;&gt;&lt;a href=&quot;#python导入lxml中的etree模块&quot; class=&quot;headerlink&quot; title=&quot;python导入lxml中的etree模块&quot;&gt;&lt;/a&gt;python导入lxml中的etree模块&lt;/
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/Hexo/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/01/hello-world/"/>
    <id>http://yoursite.com/2018/10/01/hello-world/</id>
    <published>2018-09-30T16:00:00.000Z</published>
    <updated>2019-03-09T03:53:34.973Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
