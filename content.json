{"meta":{"title":"一护的Blog","subtitle":null,"description":null,"author":"bleach一护","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-03-07T15:37:41.000Z","updated":"2019-03-07T15:39:04.293Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-03-09T03:21:55.000Z","updated":"2019-03-09T03:21:55.192Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-03-09T03:21:41.000Z","updated":"2019-03-09T03:21:41.386Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Windows保护模式学习1-双机调试环境使用xp系统","slug":"Windows保护模式学习1-双机调试环境使用xp系统","date":"+020203-10-31T16:00:00.000Z","updated":"2020-03-22T09:45:23.225Z","comments":true,"path":"20203/11/01/Windows保护模式学习1-双机调试环境使用xp系统/","link":"","permalink":"http://yoursite.com/20203/11/01/Windows保护模式学习1-双机调试环境使用xp系统/","excerpt":"","text":"Windows双机调试环境的搭建配置虚拟机 最近正好在学习windows的内核相关的知识，要想调试高2G的内存空间就必须要有双机调试环境。我这里用的虚拟机为VirtualBox,在VBOX中要在你要调试的系统添加串口，右键设置选择 串口 ，然后启用串口1，端口模式选择“主机管道” 注意不要勾选连接至现有的管道或套接字 ，然后在路径中填写以下路径 \\.\\pipe\\com_1 之后进入虚拟机。 在Windows XP系统中要想进入调试模式要在 root.ini 文件中添加描述才能够进入调试模式。加入下面的描述即可 multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=”Microsoft Windows XP Professional” /noexecute=optin /fastdetect /debug /debugport=COM2 /baudrate=115200 我这里XP系统是用的串口2 这之后我们重启虚拟机之后可以发现可以进入调试模式。 之后打开Windbg,选择 File\\Kernel Debug 然后配置虚拟机的信息按照下面的方法配置 配置完成后，就会出现下面这个画面windbg一直卡在一个界面，这是我们按 Ctrl+break 键来让虚拟机强制中断(这时已经在windbg的调试下了),按完这个键之后等一会就能看到下面的内容.我们发现其已经断下，在去点击虚拟机里的鼠标键盘已经不能使用，说明确实断下了。 最后查看一下GDT表来确定环境搭建成功","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"Windows Kernel","slug":"Hexo/Windows-Kernel","permalink":"http://yoursite.com/categories/Hexo/Windows-Kernel/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Windows Kernel","slug":"Windows-Kernel","permalink":"http://yoursite.com/tags/Windows-Kernel/"}]},{"title":"dll简单编程","slug":"简单dll编程","date":"2019-12-28T16:00:00.000Z","updated":"2020-03-09T12:17:40.904Z","comments":true,"path":"2019/12/29/简单dll编程/","link":"","permalink":"http://yoursite.com/2019/12/29/简单dll编程/","excerpt":"","text":"dll编程dll是什么 dll文件是windows所特有的动态链接库文件，是应用程序的一个模块，主要用来导出一些函数和数据来供程序中的其它模块来使用。比如我们要使用MessageBoxA这个函数，我们就要从user32.dll中导入此函数来供我们使用，但是windows操作系统会为我们导入一些必须的dll，如果我们想要开发自己的模块函数就要自己去编写dll，来动态的加载。dll与exe的关系 dll和exe本质上都是windows的可移植文件都是遵循windows PE结构的。动态链接库文件本质上与可执行文件没有大的区别。都是作为模块被加载到进程的空间地址的。创建一个dll文件 创建一个dll也很简单，我们就直接打开vs2019，创建一个动态链接库文件， 如图，然后我们创建完以后，vs会为我们自动生成一些代码。 动态链接库文件的入口是 BOOL APIENTRY DllMain( HMODULE hModule,DWORD ul_reason_for_call,LPVOID lpReserved) 这里的 APIENTRY 是函数的调用方式，默认为stdcall。HMODULE 是dll的模块句柄，下一个参数DWORD ul_reason_for_call 是指调用的原因，最后一个参数没有被使用。因为DllMain函数是仅供操作系统使用的我们不能把导出函数写在DllMain中，我们在写导出函数时也是可以有两种导出方式一种按名称导出，一种按序号导出。我们这种重点接绍按名称导出。12345678910111213141516#include&quot;pch.h&quot;BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved )&#123; switch (ul_reason_for_call) &#123; case DLL_PROCESS_ATTACH: case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; &#125; return TRUE;&#125; 编写导出函数 首先我们要做的是在头文件中声明一下导出函数，而我们写的下面的代码,就是说我们如果按照c++的标准，就定义 EXPORT 关键字为导出函数的格式，也就是说我们在写导出函数时声明就只要加上 EXPORT 即可。 12345#ifdef __cplusplus#define EXPORT extern&quot;C&quot;__declspec(dllexport)#else#define EXPORT extern&quot;C&quot;__declspec(dllexport)#endif 声明完成后我们就可以来写一个导出函数，就以一个最简单的例子来写，就是一个加法函数，我们在头文件中声名一下，然后在一个新的文件中使用。 装载期间动态加载 dll动态链接库文件的导出的函数可以有两种使用方式，第一种是在装载期间动态加载，这种方式需要我们把刚刚写好的dll程序生成的后缀为 .dll和.lib 文件放在我们需要使用导出函数的程序，在我们编写时要加上下面这些话，而且还要显示的声明一下我们要用的导出函数。之后我们就能够使用我们的函数了。12#pragma comment(&quot;lib&quot;,&quot;lib文件名&quot;)extern “C” __declspec(dllimport) void Plus(int x, int y); 这种方式的缺点就是如果没有lib文件就不能够使用了。 运行时动态加载 这种方式我们要用到一个很好用的函数LoadLibary以及GetProcAddress函数来动态的加载函数，这两个函数中，LoadLibary函数可以加载目标dll文件，GetProcAddress函数可以获得目标dll中的指定的导出函数的地址。我们只要定义一个函数指针指向此函数就可以了。","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"dll编程","slug":"dll编程","permalink":"http://yoursite.com/tags/dll编程/"}]},{"title":"crackme_test1","slug":"crackme_test1","date":"2019-11-02T16:00:00.000Z","updated":"2019-11-16T03:57:34.284Z","comments":true,"path":"2019/11/03/crackme_test1/","link":"","permalink":"http://yoursite.com/2019/11/03/crackme_test1/","excerpt":"","text":"crackme_test1查壳 这个Crackme是一个外国OD教程教程中的一个很经典的Crackme,今天我也做了一下，来看看到底是什么样子的。首先还是先去查一下壳。PEID显示其是MASM32写的。那我们就先用IDA来看一下。 IDA分析 还是先输入一个测试数据来先试试，输入用户名为 qweqwe, 密码随便输入一个比如 1111111 ,发现弹出了错误提示的字符串，然后我们就直接IDA来看详细的信息。 IDA载入后F5一下，我们能够看到这个程序使用的是标准的windows消息循环，在main函数中就是一个标准的窗口的注册和创建过程。在这其中最重要的就是窗口的事件处理函数，也就是回调函数。在这个程序中就是 WndProc，这样一个函数，跟进去看一下。这个消息处理函数中最重要的就是两个用if语句判断，再去调用函数 DialogBoxParamA去生成子对话框的部分，不过其中第一个子窗口是生成帮助窗口的，也就是说真正的判断窗口是第二个if语句来生成的，我们直接去分析这个部分的子窗口的回调函数。 跟进第二个子窗口的回调函数也就是 sub_401253 这样一个函数，内容如下，其中 case 0x110u 是初始化dialog用的，主要看 case 0x110u 这个是对WM_COMMAND来进行处理的，这个也就是获得用户名和密码输入的也没什么大用处。回到WndProc函数中接着分析。12345678910111213141516171819case 0x110u: return SetFocus(hWnd); case 0x111u: while ( 1 ) &#123; a1 = 0; if ( a4 == 1003 ) break; if ( a4 != 1002 ) return 0; a4 = 1003; if ( GetDlgItemTextA(hWnd, 1000, String, 11) &gt;= 1 ) &#123; GetDlgItemTextA(hWnd, 1001, byte_40217E, 11); a1 = 1; goto LABEL_14; &#125; &#125; break; -接着就是一个很重要的函数对用户名的处理，也就是sub_40137E这个函数，跟进去看一下，里面的结果看起来很不舒畅，而且如果这道题只用IDA的F5分析，最后的结果也是不正确的，从这一步起，我推荐用OD去分析。OD载入开始 OD 分析后面的部分 载入OD后我们在0x401228处下断点，因为在这里之后的一个call就是IDA中的sub_40137E这个函数。直接运行输入我们的测试数据，我们直接跟进这个函数。 对于sub_40137E函数，它做的事情就是 比较用户名的每一位是否是小于 ‘A’ 的如果小于’A’直接就退出. 比较用户名的每一位是否是大于 ‘Z’ 如果大于Z就会触发另一个函数，而这个函数的作用就是使原来的那一位字母的ascii值减32，也就是小写转大写。 把用户名的每一位的ascii值相加得到的结果再去异或0X5678 之后就是对4013D8函数的分析，这个函数是对密码进行处理的。 首先是取密码的每一位然后减去0x30，之后再用一个变量(初始值为0)乘以0xA。 然后就是把这个变量的值加上密码减去0x30的值重新赋给变量。 最后的结果再异或0x1234 最后就是一个比较，比较两个函数处理后的值是否相等，相等就会弹出成功的messagebox。 但是这里我们就要想一想，这个判断的表达式为f1(用户名)=f2(密码)，但是我们随便输入一个密码比如“111”，这个函数再没有XOR0x1234前处理后的结果为”6F”,也就是’111’的16进制。也就是说再没有异或前就是把10进制转为16进制，这样我们就能通过用户名得到结果了， 我们就只要把用户名通过第一个函数的处理再去异或0x1234得到一个十进制数，然后再通过f2函数的处理一定是正确的结果(异或运算是可逆的)。 注册机的编写 分析完就很简单，只要模拟一下第一个函数的过程得到的结果再去异或0x1234就可以了。代码如下:12345678910111213141516str1=input(&quot;请输入你的用户名: &quot;)list1=[]temp=0sum=0for i in str1: list1.append(i)for j in list1: if j&gt;&apos;Z&apos;: temp=ord(j)-32 if j&lt;&apos;A&apos;: print(&quot;输入有误！&quot;) if j&gt;&apos;A&apos; and j&lt;&apos;Z&apos;: temp=ord(j) sum+=tempsum=sum^0x5678^0x1234print(sum) 结果 用注册机随便写个用户名输入判断。","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme18and19","slug":"160个crackme18and19","date":"2019-10-29T16:00:00.000Z","updated":"2019-11-19T06:18:08.304Z","comments":true,"path":"2019/10/30/160个crackme18and19/","link":"","permalink":"http://yoursite.com/2019/10/30/160个crackme18and19/","excerpt":"","text":"160个crackme18首先来看一下程序 程序的界面就只要输入一个注册码，所以可以直接认定是明码在程序中应该直接存在的，我们直接OD来看看程序。 OD载入程序 我们载入程序后直接来搜索字符串，找到我们刚刚看到的错误提示的字符串，然后跟进去。我们发现在错误提示上面就有一个字符串cmp的比较函数，那就可以直接推测出这个函数就是来比较输入和序列号的。再往上看就可以看到一个字符串的len函数，获得输入内容的长度，如果长度大于1就跳到比较函数那。我们直接在这个函数上下断点。当我们执行到比较函数那里时，就出现了明码也就应该是正确的序列号。 我们把注册码在输入到原程序中，发现正确。 160个crackme19还是看一下程序 这次的程序就多了一个输入，是典型的用户名-注册码的形式，我们直接直接用PEID来查看一下详细的信息。 查看信息发现是VC6写的，这里我们可以用IDA来直接去分析比较简单和快捷。不过我在这里还是用OD来分析一下。 OD载入程序 用OD还是要先去搜索字符串向上去查找信息，我们的目标是找到注册码的生成算法。 找到了错误提示信息，跟进去在上面的代码中又发现了上一题中的正确注册码，但是在这一题中很明显是有用户名的，所以我们继续往上去找。 继续往上看代码，在地址为 0x401551 处我们发现了一个很常见的win32api，就是 GetDlgItemTextA 这个函数，而且在下面也调用了一次，就说明这里是来获得用户名和密码的，我们在此设断点来接着分析。 随便输入一个用户名和密码，我这里用户名输入的是 AAAAAAA ，我们接着单步走，之后会有一个函数来获得用户名的长度并比较长度是否小于5。 之后如果长度符合就会跳到关键函数了，首先这个函数会调用另一个函数来获得用户名每一位的ascii值。 之后就是关键： 首先从[ebp-10]中获得一个值，这个值首先要加上用户名的一位ascii值（循环每一位），并且得到的结果仍然保存在[ebp-10]中。 之后设置循环次数为i（每次取一位，直到取完所有的用户名），在把循环次数左移8位，之后用[ebp-10]里的值来异或移位后的值，并把结果保存在[ebp-10]中。 把用户名的长度乘以循环次数，相当于len(用户名)* i，之后再把结果取反，之后把取反后的结果乘以i+1。最后再把[ebp-10]中的值乘以得到的结果 用公式来表示为：123[ebp-10]+=ord(username[i])[ebp-10]^=i&lt;&lt;8[ebp-10]*=(i+1)*(~(len(username)*i)) 注册码的计算就是这样的，我们直接去写注册机。 注册机的编写 这里我刚开始写的犯了很大的错误，用python写的时侯一直不对，每次得到的结果都比实际答案多了几百倍，比如下图。后来我才意识到是c++的int的精度不够，但是python的精度比c++要高，所以得到的结果不正确。之后用c写了一份得到了正确的答案，给出下面的注册代码:123456789101112131415161718192021222324252627282930#include&lt;stdio.h&gt;#include&lt;Windows.h&gt;#include&lt;string.h&gt;void test1()&#123; char name[15] = &#123;0&#125;; int sum1 = 0x81276345; printf(&quot;请输入你的用户名: \\t&quot;); scanf_s(&quot;%s&quot;, name, 15); int strlen_1 = strlen(name); if (strlen_1 &lt; 5) &#123; printf(&quot;输入的用户名不能小于5！&quot;); return; &#125; for (int i = 0; i &lt; strlen_1; i++) &#123; sum1 += name[i]; sum1 ^= i &lt;&lt; 8; sum1 *= (i + 1) * (~(i * strlen_1)); &#125; printf(&quot;%d \\n&quot;, sum1);&#125;int main()&#123; test1(); return 0;&#125;","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳","slug":"以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳","date":"2019-10-09T16:00:00.000Z","updated":"2020-02-09T09:48:14.581Z","comments":true,"path":"2019/10/10/以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳/","link":"","permalink":"http://yoursite.com/2019/10/10/以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳/","excerpt":"","text":"以xctf的一道crackme来简单的讲讲esp定律脱简单的压缩壳首先还是查看程序的壳 当我们用PEID来查看时，就会很明显的看到其是一个Nspack壳，这个壳大家都叫它北斗壳难度不大也是一个压缩壳可以用ESP定律来脱壳。 用ESP定律来脱一些简单的压缩壳 我在这里，就借着这道ctf题来介绍一下ESP定律。以及怎么用ESP定律来脱简单的压缩壳。这里我推荐一下52破解基础教程里ximo脱壳教程里面的基础壳教的都挺好的。什么是ESP定律 简单的来说ESP定律就是利用堆栈平衡来进行脱壳，加壳的程序也是必须保证外壳初始化的现场环境（）要与原程序的现场环境是一致的（主要就是 esp 等重要的寄存器），也就是会保护现场与恢复现场 所以常见使用pushad，popad这样两个指令，也就是我们如果用OD打开程序见到的是这样的指令就要想到要恢复堆栈。 如何来利用ESP定律来脱壳呢，就是我们OD载入程序后，先f8运行，找到使寄存器窗口中esp突变红时的esp寄存器的值下硬件断点，在f8执行，这样就会跳到一个离调用popad指令不远的地址，这条地址后应该会有重要的跳转指令（一般就只向程序的OEP）。以一个nspack壳为例子来看一下。 看到这样的入口特征，就先f8执行一下，找到esp寄存器里的值，在数据窗口跟随。 然后我们下硬件断点，然后在让程序执行。硬件断点下法就是找到要下断点的地址然后右键找到断点，断点中有右键断点选硬件访问word就行了，然后直接运行程序。。不过我这里OD把代码当成了数据所以出现了很多的字符。完成后就只要dump一下就完成了脱壳.OD里有自己的dump工具我们直接使用就可以了。,这样我们再去查壳就不会出现nspack的标志了，但是有的时候加壳会改我们的IAT表我们有时要自己把IAT修复。 接下来我再来用esp定律脱一个最常见的压缩壳UPX壳。我们还是先找到esp突变的值然后下硬件断点.之后我们就直接找到oep在dump就好了。，可以看到这是一个典型的delphi的程序。 ctf题解 按照上述步骤脱完壳后，这里在打开文件发现无法运行，这里就要我们去修复IAT，使用工具ImportREC_fix_HH.exe来把IAT表修复就可以了，具体的步骤见图。 之后就直接IDA分析 main函数.-我们可以看到主要的判断点就是while循环中的部分，buff数组异或另一个数组，在和dword_402150[v4]一个数组的值来进行比较，我们可以看看另外两个数组的值。。因为是异或运算，所以我们只要让buff外的数组异或一下就可以获得buff数组的值，按照程序的代码我们写一下脚本来完成这个题 123456789v1 = [0x12, 4, 8, 0x14, 0x24, 0x5c, 0x4a, 0x3d, 0x56, 0xa, 0x10, 0x67, 0, 0x41, 0, 1, 0x46, 0x5a, 0x44, 0x42, 0x6e, 0x0c, 0x44, 0x72, 0x0c, 0x0d, 0x40, 0x3e, 0x4b, 0x5f, 2, 1, 0x4c, 0x5e, 0x5b, 0x17, 0x6e, 0xc, 0x16, 0x68, 0x5b, 0x12]v2=&quot;this_is_not_flag&quot;result=&quot;&quot;for i in range(0,len(v1)): result+=chr(ord(v2[i%len(v2)])^v1[i])print(result) 这里的len就是16，当时第一次写的时候没把‘t’加上直接溢出了，所以用的len（）尴尬！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"},{"name":"脱壳","slug":"脱壳","permalink":"http://yoursite.com/tags/脱壳/"}]},{"title":"160个crackme-shadow","slug":"160个crackme-shadow","date":"2019-10-08T16:00:00.000Z","updated":"2019-10-09T14:00:08.744Z","comments":true,"path":"2019/10/09/160个crackme-shadow/","link":"","permalink":"http://yoursite.com/2019/10/09/160个crackme-shadow/","excerpt":"","text":"160个crackme-shadowDF-17真的帅啊，看到的瞬间我都想去造导弹了。。。。。可惜啊！！！！！！！！ 言归正传还是回到我们的crackme，这个叫shadow的我也不知道是几了，所以就直接叫名字了。程序初探 我们可以看到这是个控制台程序，再输入账号密码后就直接exit了。所以我们再用peid来查查看，虽然觉得没必要但还是要的。这里我们可以看出其并没有任何的加壳信息，就是win32 console。于是我们就直接OD来分析。 算法分析 1 打开OD以后我们就能看到很多的api函数的调用，不过作者倒是给了一点提示信息:说这是一个纯汇编程序，然后还扯了一大堆没用的东西，这里我们也不要管了。 2 我们用OD打开后，直接F8来让程序执行，然后我们可以看到其首先是获得用户名的长度，然后再比较用户名长度是否为空，或者是用户名长度是否超过了8，如果遇到这两种情况都直接退出。程序中是把长度加2后进行比较的 3 之后在判断完用户名长度后，紧接着就对用户名的内容进行了判断，如果遇到 shadow，lamer，guest 中的任何一个都直接退出。 4 在之后就是获得密码长度，并且比较是否密码为空如果密码为空就直接退出。之后就是获得密码长度，以及比较不过都不是关键。 5 之后就到了5个call了，但是这些函数中真正有用的其实只有一个。我们还可以观察到这五个中有两个是相同的函数可以只分析一个，所以接下来就是跟进函数内分析。 6 第一个函数我们可以看到就是循环比较密码的每一位和他提供的那几个值来比较如果最后zf寄存器的值为1，那么地址[40226c]里的值标为5。 7 第二个函数里我们可以看到还是先循环比较密码的每一位和0的值是否相同如果有0直接就跳出call，之后就是循环比较密码的每一位和 ‘S’ 的值是否一样如果一样就让地址[40226d]里的值加一。看到这里觉得也和题目的密码生成没什么关系。 8 第三个函数一看就是没用的因为，其只是去比较和跳转（而且直接跳出去）根本没有对内存有任何修改，所以这个call可以直接忽略。 9 之后的就是重复的函数调用了，我们接着往下走。过了这几个call后就直接跳到了一个比较的地方，而且比较的正好是我们第2个call所修改的内存地址的值.可以看到他是比较那个值和4是否相等，如果相等就跳。如果不等于4就比较是否大于4，如果大于四也要跳转。这就是有两个地方要我们去判断一下那个是正确的了。 10 我们可以看一下那个等于4时要跳到的地址发现是try harder，那就证明是不对的，于是再去看看另一个地址我们在看看另一个地址发现他并没有提示信息，于是看一下它push的内存中信息，发现了 root access…… 这样几句那也就是说只要密码中多于4个”S”，就能够成功了。 总结 这题我当时也绕了几次才解决的，但是总的来说是不难的当我们看懂的时候还是很简单的，最后附上结果图","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme44","slug":"160个crackme44","date":"2019-10-01T16:00:00.000Z","updated":"2019-10-08T11:36:35.279Z","comments":true,"path":"2019/10/02/160个crackme44/","link":"","permalink":"http://yoursite.com/2019/10/02/160个crackme44/","excerpt":"","text":"160个crackme44还是先打开程序观察观察 这个程序打开一看就知道不是英文，所以也不用在乎那么多直接百度翻译查什么意思，随便输入用户名和密码后，出现一堆不认识的字符百度翻译说的是 错误不要再尝试了，哎呦这真的是瞧不起我喽。那么我们直接去搞定它！ 查壳 直接拖入peid中查看信息.看到是delphi的程序就想着直接dark神器走起，结果是dark无法对其进行解析。。。。。。。无奈只能自己去找。那就先用ida添加个delphi的标签方便我们看函数,导出map文件后就直接OD来分析。 算法分析 打开OD这次我们就直接搜索unicode，我们可以看到那个错误提示信息的地址，于是推测上一个不认识的字符串就应该是成功的地址，于是我们直接定位到那个地址。 我们往上找可以找到这个事件的入口，我们入口处设置断点然后去分析整个算法的逻辑。这里刚开始就先获取用户名的信息，然后把大写字母的输入转成小写字母，然后获得密码。再获取完密码后有一个判断：如果用户名长度小于6，就会跳出一段不认识的字符串来告诉你小于6.之后一段就是一个switch语句的分析了。 我们看到movzx之后就知道这个应该是循环取用户名的位数然后再把它-97后和19进行比较如果大于19就跳转。然后我们可以看到其只是对61-7A进行筛选，也就是小写字母从 a-z 来选。这里还有一点要注意 [ecx+edx-1]，这个地址的第一次指向不是我们认为的用户名的第一位，而是其前一个地址，恒等于0的一个byte位，之后就是大段的case分支了。 这里我们可以看到其实就是作者给每一个字母都换了值，除了这些字母外其它的都是直接赋给了0x5D这个值。并且把它们的值都累加起来放在bl中，这里也要特别注意一下: bl只是一个8位的寄存器只能放2个十六进制数所以不要弄错了，再之后就是一个循环了我们可以看到会循环6次但是只能取到用户名的5位，这里也表明输入太长的用户名也没什么影响。我们再接着往下分析。 这里我们看到用eax乘以0x4a7e，而eax中存放的正是用户名的长度，也就是用户名长度乘以0x4a7e，之后就是 mov al,bl 后的代码也就是把我们计算后的结果也转为10进制，之后把这两个值用 “-”连接起来，我们可以看一下栈里的内容.这里我们就能清楚的看到了密码到底是怎样的了，于是我们就写注册机来还原一下密码生成的过程。123456789101112131415161718192021222324252627282930list1=[0x18,0x25,0x42,0x0c,0x0d,0x6,0x36,0x2b,0x17,0x2f,0x13,0x82,0x9b,0x92,0x3,0x63,0x21,0x42,0x5c,0x29,0xc7,0x66,0x58,0x0a,0x28,0x50]str1=input(&quot;请输入你的用户名&quot;)len1=int(len(str1)*0x4a7e)str2=list(str1)for i in range(0,len(str1)): if ord(str2[i])&gt;=65 and ord(str2[i])&lt;=90: #大写转小写 str2[i]=chr(ord(str2[i])+32)for i in range(0,len(str1)): if ord(str2[i])&gt;=97 and ord(str2[i])&lt;=122: str2[i]=ord(str2[i])-97 else: str2[i]=0x5dtemp =0x5d for i in range(0,5): if str2[i]==0x5d: temp+=str2[i] else: temp+=list1[str2[i]]temp1=str(hex(temp))#得到总的值后转为16进制list2=list(temp1)# 这里我们只要byte位所以只要最后两个字符就好了list3=[list2[-1],list2[-2]]list3.reverse()temp2=0for i in range(0,len(list3)): if ord(list3[i])&gt;=97 and ord(list3[i])&lt;=102: list3[i]=ord(list3[i])-87 temp2+=int(list3[i])*pow(16,len(list3)-i-1)#因为不知道怎么用python直接把字符串转为16进制绕了这一大圈才完成这个转换print(str(temp2)+&apos;-&apos;+str(len1)) 算法流程： 用户名长度乘以0x4a7e 计算用户名的前5位的值的和（字母查表，其余都为0x5d），并且要加上一个0x5d的值 用“——”连接起来 我在写这个的时候没有判断长度的问题，自己知道长度就好了啊啊啊。但是还是要说一说 这个byte位真的很坑啊，我绕了半天才绕完，欢迎大家给出好的写法。结果 这样下来我们就完成了，测试一下是否正确。我测试了很多都是成功的，这样我们这一题就大功告成了！！！！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"CE小游戏第一关","slug":"CE小游戏第一关","date":"2019-08-10T16:00:00.000Z","updated":"2019-09-27T04:11:03.582Z","comments":true,"path":"2019/08/11/CE小游戏第一关/","link":"","permalink":"http://yoursite.com/2019/08/11/CE小游戏第一关/","excerpt":"","text":"CE小游戏第一关 这次首先来讲一下CE自带的小游戏的第一关，第一关的意思就是每发射5次子弹目标就会重新恢复生命，我们要做的就是把目标击败。思路一 我们来尝试攻击目标发现其血量在依次降低，到了第五次恢复满，于是就有想法去搜索其生命值，第一次未知就搜未知的值，后面生命值减少时，搜减少的值，当生命值增加时，再去搜增加的值来锁定血量的地址。当我们第一次搜减小的值发现有很多值，于是我们还要继续这样来搜索以便减少无用的地址量。 当我们在搜索到第4次发现一个值只有4，很符合我们的需求，于是我们再测第五次来验证我们的想法。第五次搜索后其值更改回了100，于是我们可以确定这个地址就是我们要找的血量地址。 我们找到了地址以后肯定想着要去改变它的值，好让我们通关，于是我们来看看是什么地方改变其值的，ctrl+f6 走着，找到了改变其值的代码，于是我们肯定想着去更改代码。于是我们在这里进行代码注入。 我们把其值改为0，然后再去打它发现我们就已经成功了。于是我们就已经采用这种方法完成了。 思路二 我们发现我们的子弹只有五发，于是另一个想法就是我们把子弹的数量改为很多不久也可以改变其值，于是我们就顺着这个思路来做。但是再测试中我也尝试在子弹只有五发的时候来搜索5，但是顺着这个思路走，发现根本无法找到我们想要的结果，于是我就想子弹应该是存在数组中的，通过函数来减小其值，于是就有了一个想法就是数组在入栈的时候，其第一个值如array[0],应该是最靠近栈顶的，,这样我们就能更加直观的体会到我们应该怎么样去查了，我们在想想假如存了5发子弹我们可以正向的记录打出的子弹，也可以记录剩下多少子弹，于是我们就猜测数组里存放的是打了几发子弹（这样便于记录）,于是我们在第一次搜索0，第二次搜索1，依次类推。以这种方式我们成功的找到子弹数量的地址，于是我们还是要再次代码注入。 观察代码可以看出其值是每次加1，也就是说和我们猜测的一致，于是我们只要把1改为0就可以了。-当我们把子弹改为 add 00 我们便可以发现子弹的数量就不会变了，于是我们变成功了。这样我们第一关就结束了！！！！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme40","slug":"160个crackme40","date":"2019-05-21T16:00:00.000Z","updated":"2019-10-04T02:26:32.672Z","comments":true,"path":"2019/05/22/160个crackme40/","link":"","permalink":"http://yoursite.com/2019/05/22/160个crackme40/","excerpt":"","text":"160个crackme40首先来看看这个程序 这个程序的样子很普通和平常见的crackme程序没什么不同，我们随便输入用户名和密码来测试一下，那肯定是不行咯，于是我们便按照程序来解决他。吼吼吼！！！查壳 我们首先要去查看这个程序是否加了壳，将其拖入peid，查看发现其是delphi的程序，对于delphi的程序，我们就采用 “先darkde4查看事件的信息，在使用OD来解决” 的思路来解决，于是我们就把这个程序拖入darkde4中。 我们在 过程 窗口中找到了多个有用的事件最重要的就是Button1Click这个事件，这个控件应该就是和我们注册能否成功相挂钩的。于是我就想在od中直接找到这个事件来开始我们的算法分析。 算法分析 打开OD，我们直接跳到Buttonclick的地址来分析。 我们先大体看一下这些代码，大概在离入口不远的地址就有了对注册信息的判断，看来这个程序的注册过程一定不是很复杂，那么我们就一步步来分析。 这些代码就是判断用户名和密码是否为空，如果有一个为空就结束并且弹出对话框提示有一项为空。这一段循环就是生成密码的过程，就是 循环取用户名的ascii值并且每次都加5并把值放在[ebp-4]的地址中 并且这个过程完成后就直接到了判断的地方，也就是说密码就是很简单的过程啊啊啊。 注册机的编写 既然都知道了算法并且如此的简单，于是我便随便写了一个python脚本来解决它。代码如下:1234567891011while 1: str1=input(&quot;请输入你的用户名&quot;) str2=[] str3=[] for i in range(0,len(str1)): temp=ord(str1[i])+5 str2.append(temp) for i in str2: str3.append(chr(i)) str4=&apos;&apos;.join(str3) print(str4) 最后附上一个我们的结果图:注: 要注意当你的用户名有z的时候加五之后其ascii的值表示为删除，所以这一题中还是尽量不要出现z为好 当你按照这个打的时候很可能出错！！！！！！！但是这不是你注册机编写的错误！！！！！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme04","slug":"160个crackme04","date":"2019-05-10T16:00:00.000Z","updated":"2019-10-07T11:08:19.789Z","comments":true,"path":"2019/05/11/160个crackme04/","link":"","permalink":"http://yoursite.com/2019/05/11/160个crackme04/","excerpt":"","text":"160个crackme04首先来看看程序 当我们打开这个程序时会发现这个注册过程和其他的都不太一样，它少了 确定键，但是本着尝试的态度，我还是随便输入一些来测试一下。我们发现无法点击底下那块灰色的控件，于是只能按步骤先去查壳喽。 查壳 把程序拖入peid查看其信息， 发现其为delphi程序，于是我们接下来就直接只用darkde4这个delphi神器来进一步的查看信息。我们可以看到那个我们无法点击的控件，是一个panel控件，而且有作者提示说注册成功会出现朱茵小姐的照片。之后我们再看一看事件。在事件中我们能注意到几个关键的地方，一个是chkcode我认为是检查密码是否相同的，应该是重点。还有两个是 paneldoubleclick 另一个是 panelclick 这两个一个是 double 另一个就是单个的，推测是点击那个panel控件的次数来判断的.于是我们od来分析。 算法的分析 打开od找到chkcode的地址来开始分析，在进入函数前看到一串字符很有意思，但是也不知道有什么用总觉得和密码应该有关，先不管了，开始分析函数。在这次的分析中，首先是要把用户名长度加上5，然后的会有一个 push dword ptr[ebx+314] 起先没注意但是后来发现就是刚才那个有趣的字符串，之后的一个 lea 指令很可疑，因为它把一个带中文的字符串地址给了 eax 于是我们跟进这个函数，发现这个函数就是把那些字符串拼接在一起。我们可以在下图中看到拼接完后的字符串的结果。 既然是chkcode那一定是来检验的后面的代码可以分析完，就是来检验和之前获得那个拼接字符串是否相同。于是我们可以大胆猜测，密码就是这个拼接字符串。 拼接字符串的生成构成大概就是： 先是一个带中文的字符串 黑头Sun Bird 把用户名长度加上5 在放入字符串 dseloffc-012-OK 在加上用户名 既然这样直接写一个注册机来试试,很简单 12345while(True): str1=input(&quot;输入你的用户名:&quot;) lens=len(str1)+5 passw=&quot;黑头Sun Bird&quot;+str(lens)+&quot;dseloffc-012-OK&quot;+str1 print(passw) 但是按照我们的设想就是输入完密码在双击在单击就可以了 于是我们尝试尝试。结果成功了，也就是说真如我们想的一样，不过在输入完密码后，要动一下键盘因为那个keyup要触发一下键盘的。漂亮的朱茵小姐就出现了 开心！！！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme02","slug":"160个crackme02","date":"2019-04-10T16:00:00.000Z","updated":"2019-09-27T02:11:37.900Z","comments":true,"path":"2019/04/11/160个crackme02/","link":"","permalink":"http://yoursite.com/2019/04/11/160个crackme02/","excerpt":"","text":"160个crackme02 1.首先来尝试爆破 首先直接打开这个小程序随便输入一个账号和密码，来尝试一下是什么效果：我们通过输入可以看出来会有弹窗，这样我们就可以用OD的插件来去搜索字符串，找到地址来具体分析，之后我们打开OD来用插件查看其地址. 我们进入去分析，我们看到了前面有一个je，并且跳转地址是判断错误的地方，断定这个地方就是关键跳转点。,于是我们就可以通过把ZF的值改变，来爆破。也可以nop填充来爆破。当然这只是第一步，下面就来对密码生成的算法来尝试破解 2.破解密码生成的算法 我们这里就要从头开始分析，第一个函数，是来获得你输入账号的长度。再用其长度0x17CFB.第二个函数，是获得你输入账号的第一个字符的ascii码的值，然后，再把值和上一步得到的结果相加。后面的汇编很长，在这里还有一个是把“AKA-”这个前缀给了密码。但是都不是检查输入的密码和生成密码是否相同的，我们要去找到一个比较两者是否相同的函数.从这个地方看到一个cmp的函数推测是来比较密码是否一致的，我们下一个断点，F7跟进一下。我们可以看到在函数中就有了密码的比较，在这个栈中可以清楚的看到两个密码，于是可以断定密码的生成方法就是: **AKA-长度0x17CFB+账号的第一个字符的ascii码的值**然后写一个简单python脚本来实现此过程: 12345str1=input(&quot;输入一个字符串&quot;)pass1 =len(str1)*0x17CFBpass2=ord(str1[0])+pass1pass3=&quot;AKA-&quot;+str(pass2)print(pass3) 然后我们来测试一下是否正确:到此为止就已经完成了crackme02！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"正则表达式学习1","slug":"正则表达式1","date":"2019-02-05T16:00:00.000Z","updated":"2019-03-16T15:40:19.730Z","comments":true,"path":"2019/02/06/正则表达式1/","link":"","permalink":"http://yoursite.com/2019/02/06/正则表达式1/","excerpt":"","text":"正则表达式的初步学习第一次接触正则是在大二的时候，现在长时间不使用，有些概念比较模糊，因此准备重拾一下自己的知识。 正则表达式是什么？ 正则表达式在菜鸟教程中的概念如下： 正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等 我的个人理解就是来对文本进行匹配的。 正则表达式的基础规则： 位置标记： 位置标记锚点是表识字符串位置的正则表达式。 正则表达式 描述 实例 ^ 指定了匹配正则表达式的文本必须始于字符串的首部 ^zxc可匹配以zxc为首的行 $ 指定了匹配正则表达式的文本必须始于字符串的尾部 zxc$可匹配以zxc结尾的行 标识符: 标识符是正则表达式的基础部分 正则表达式 描述 实例 . 匹配任意一个字符 asq.可以匹配asq1或者asqe 但是不能匹配asqer 其只能匹配单个的字符 [ ] 匹配括号中的任意一个字符，中括号内可以为字符组或者字符范围 par[kj]可以匹配park或者parj ,[0-9]可以匹配任意的单个数字 [ ^ ] 匹配不在中括号中的任意一个字符 这个就比较好理解如 9[^12]就不能匹配91 或者 92 数量修饰符: 数量修饰符定义了模式可出现的次数 正则表达式 描述 实例 ? 只能够匹配之前的项1次或者0次 courl?可以匹配courl 或者是cour + 匹配之前的一项1次或者多次 courl+ 可以匹配courl或者 courll 等等 * 可以匹配之前的一项0次或者多次 c * ourl可以匹配 courl或者ccourl或者是ourl 等等 {n} 匹配之前的项n次 如[0-9]{2} 能够匹配任意的两位数 {n,} 之前的项至少要匹配n次 如[0-9]{4}能够匹配任意一个4位数或者更多位的数字 {n,m} 之前的项匹配的最小次数与最多次数 [0-9]{2,5}匹配两位数到五位数之前的任何数字 正则表达式的基本规则大概就是这些，之后会给出如何匹配出你想要得到的数据","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"正则表达式学习","slug":"Hexo/正则表达式学习","permalink":"http://yoursite.com/categories/Hexo/正则表达式学习/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"正则表达式学习","slug":"正则表达式学习","permalink":"http://yoursite.com/tags/正则表达式学习/"}]},{"title":"CE的基础练习","slug":"CE的基础练习","date":"2019-02-05T16:00:00.000Z","updated":"2019-09-25T14:46:52.770Z","comments":true,"path":"2019/02/06/CE的基础练习/","link":"","permalink":"http://yoursite.com/2019/02/06/CE的基础练习/","excerpt":"","text":"CE的基础练习 首先，CE就是cheat engine就是作弊引擎，我也是看了吾爱破解的大佬的相关文章之后也觉得记录一下自己的学习过程。附上大佬的帖子链接吾爱破解CE链接 接下来，我们就直接开始做做CE提供的基础题，我这里用的CE是中文版的，大家也可以直接在我爱破解上下载，或者用我在这里给的链接CE中文版,提取码是:0o2z不过下载完解压完之后还不是中文版，大家要自己在setting选项上选择中文。 接下来就要开始CE的基础使用了，CE自己提供了一个内置的小学习程序挺有趣的教学内容，我们就一题一题的往下做。 首先第一题，CE的这个小练习，在帮助栏里可以找到。那第一题的要求是这样的,就是要我们把生命值改为1000，而且提示里说用精确数值扫描，所以我们就顺着题目的要求来找到地址，修改值即可。首先我们先要把进程加载到CE中，然后我们用精确数值扫描。我们知道刚刚开始时，生命是100，所以我们首先来搜100，就是用默认的4字节的方式就可以。第一次扫描会有很多的值，所以我们要进行筛选。我们点击 “打我”，可以看到我们的生命减一点变为了98，于是我们再去搜索98，就这样持续下去可以定位到改变生命的地址.我们双击那个唯一的地址，把他加入到地址列表中，修改值为1000。，这样我们就可以回到那个小测试上，发现已经可以点击下一步了，第一题就结束了。 接着就开始做第二个题目，第二个题目就是说是未知大小的值，因为我们看不到我们的生命值，于是我们可以使用CE的未知值来先搜索，我们在扫描类型中选择 未知的初始值 然后开始扫描,可以看到扫描结果很大，连地址都没有出现，但是我们可以想象到应该通过血量的变化来锁定地址，在小程序中点击打我，可以看到生命值减小了，于是我们在接着搜 减少的数值那一项*,可以看到地址减少了很多，于是还是继续上述的打我-搜减小的数值,得到如下的结果,结合提示信息知道血量在 0-500* 之间于是我们找到地址直接改为5000结束。 第三题是关于浮点数，单双精度的问题，这两个算是很简单的了，直接在搜索中选择确定的值，在 数值类型 中选择单浮点和多浮点然后再按照上两题那样的方法，来锁定地址就可以过关了。 第四题的题目，本题就是要我们来修改代码来使当我们点击 改变数值 时值不改变，那我们还是要先找到变动数值的地址，方法和上面几题一样。然后我们选中地址右键选择 找出是什么改变了地址 这一项或者直接 Ctrl+F6,然后我们会看到这样一个小窗口，,然后我们回到小程序的界面点击改变数值，可以发现其中已经有汇编代码了，,这里我们直接把它nop掉，或者注释掉都可以实现我们的目的，，这样就ok了。 第五题，,这个题目就是去学着去找基址，首先要做的还是锁定数值的地址，方法和上述题目一样。，锁定了之后看他题目的描述，就是找到指针，那我们还是Ctrl+f6走起，来看看什么能改变这个地址。，我们可以看到一个很符合指针特征的汇编代码就是MOV [edx],eax这个是典型的指针变量的特征。前面肯定有取址的指令。如果有没有学过c语言的人可能不知道为什么这符合指针的特征，我们就用一个例子来解释一下。,我们可以在VC6的反汇编窗口看到，编译器处理指针时，首先取地址，把地址值传给寄存器，在把寄存器的值传给指针变量，当然这是debug版的。为什么不把地址直接传给指针变量呢（mov指令的使用规则，两个内存不能用mov指令）。这样我们知道指针的特征后，这个题目就很好解决了我们找到了一个地址这个地址是存放在指针里的，在去找一下那个指针的地址，我们只要在去搜一下这个地址即可，这样我们手动添加到地址栏，我们这里的偏移为0，也很容易理解毕竟只是 [edx] 没有偏移。然后我们找到基址后修改值为5000后点击改变指针就成功完成了。 第六题，，这一题就是要我们通过修改代码来实现点一下 打我 加两滴血的操作，当然第一步还是先找到血量的地址。找到地址后我们就要去看看是哪个地方改变了这个值,,注意到的操作是sub dword ptr [],01于是我们知道血量的操作是每次减一，我们只要改成 add dword ptr[],02，就可以了我们只要用CE，进入自动汇编后选择代码注入，地址就是在默认的那个点击确定后，出现代码，然后按照我的想法修改sub为add后的代码后再去小程序中点击打我会发现开始加血了，于是本题也就成功了。 第七题，，多级指针这可能是初学c语言的同学最头疼的地方，题目中给出的是一个4级指针，我们不妨在c语言里给出一个四级指针来演示一下过程，好让初学者更好的理解多级指针。首先以2级指针为例，，这就很容易理解2级指针里存放的是一级指针的地址，那么如果是4级指针就是存放3级指针的地址，我们来看一下，从图中可以看出对于4级指针它就是存放的3级指针的地址，层层递进的关系。于是我们在来看题目，还是先找到最初的血量地址，方法雷同，，找到之后我们还是查看什么改变了这个地址，我们可以看到那个代码符合指针的特征[esi+18]注意这里的18是偏移量，于是我们把 01936a80 放入搜索栏中得到了一个新的地址，我们还是顺着上面的思路不过这次不要选什么改变了，选什么访问了地址。，然后我们发现怎么地址是一样的呢，，我的想法就是因为我们得到的地址是加了偏移的地址(在结果栏显示的地址，但是这里没有偏移也就是说我们定位的地址就是其指针的地址)这里引用一个大佬的话 CE 默认使用硬件断点的方式，断点只能停在指令执行之后，而这条指令正好是把 esi 原来指向的地址中的值再赋值给 esi，所以执行之后 esi 的值已经是被覆盖掉的值了，而我们想知道的恰恰是执行这条指令之前的 esi 值，那么怎么办呢，我们发现有一个地址是指向这个地址的于是我想看看是不是这个地址就是上一个指针的地址于是怀着试试看的想法我搜了一下地址，结果发现点击改变数值，确实发生了变化，于是锁定了地址。，然后发现这一个的偏移是0x14，于是接着搜地址，这次的地址偏移是0x0c下一次按照提示就应该是基址了，于是我们再接着搜地址，就是搜地址找到基址为止！，于是我们终于找到了基址！！！ ,这样一来剩下的就只要手动加地址，修改值就OK了。再按照我们刚刚讲解的四级指针的运作流程填偏移就很简单了，然后我们在锁定一下，再去改值就ok了. 第8题 题目，这题很好玩就是模拟对打要求就是你要获胜但是不能够锁定生命值，在这道题里生命值为单浮点类型。我的想法就是先找到血量的地址，再通过代码注入来修改生命值获得胜利，我们首先来找我们自己人的生命地址，我们在地址栏点击我们选中的地址在选择 浏览相关内存区域,可以看到在18e00b0处有一个01的标识，可以猜测是否为组队信息，于是我们接着找队友eric与对手HAL的标识来确认我们的新想法。，对比可以看到一个的标识是01，另一个是02这也确定了我们的想法，于是我们就这此处注入代码。结果就是不会改变我方的值，只有敌人的血量变化。，我们点击重启游戏并且执行后发现，我们成功了 ！！！！到这里基础的内容CE内容就结束了，CE后面还自带了几个好玩的小游戏的练习后面也会做出来玩玩。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"Cheat Engine","slug":"Hexo/Cheat-Engine","permalink":"http://yoursite.com/categories/Hexo/Cheat-Engine/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Cheat Engine","slug":"Cheat-Engine","permalink":"http://yoursite.com/tags/Cheat-Engine/"}]},{"title":"xpath中常用语法","slug":"xpath常用语法总结","date":"2019-02-03T16:00:00.000Z","updated":"2019-04-09T14:50:06.675Z","comments":true,"path":"2019/02/04/xpath常用语法总结/","link":"","permalink":"http://yoursite.com/2019/02/04/xpath常用语法总结/","excerpt":"","text":"xpath常用语法 xpath是一门在XML文档中查—title: 正则表达式学习1 date: 2019-02-06tags: Hexo 正则表达式学习categories: Hexo 正则表达式学习 —找信息的语言，在爬虫中常用来查找信息，因此掌握其语法，可以帮助我们很好的去查找想要获得的信息。 如何来进行节点的选择 选择一个适当的节点，对于找寻信息至关重要。往往一个/或者//的选取会得到不同的信息，而且可能和你想像的相差甚远。接下来，就来说明几个重要的概念。 父节点与子节点: 如下图所示:的解释一样。 下面来具体的讲讲如何来选取节点: xpath使用路径表达式在XML文档中选择节点的，节点是沿着路径或者step来选取的. 表达式 描述 / 从根节点来选取 // 从当前节点进行选取，不考虑其位置 @ 选取属性 . 选取当前节点 以一个例子来实际操作一下:先选取其父节点，然后依次来找出信息所在位置的节点信息，最后获得其内容当然，一般浏览器都可以自动获得xpath，但是还是有必要学习一下，以此为例子，我们能够看出来实际中如何取操作这些节点来得到我们想要得到的消息. 最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath helper 前提是你可以科学上网","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"python爬虫","slug":"Hexo/python爬虫","permalink":"http://yoursite.com/categories/Hexo/python爬虫/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}]},{"title":"用lxml与requests模块爬取起点中文网的免费阅读列表","slug":"用python中的lxml模块爬取起点网免费阅读列表","date":"2019-02-02T16:00:00.000Z","updated":"2019-03-10T03:35:57.332Z","comments":true,"path":"2019/02/03/用python中的lxml模块爬取起点网免费阅读列表/","link":"","permalink":"http://yoursite.com/2019/02/03/用python中的lxml模块爬取起点网免费阅读列表/","excerpt":"","text":"用lxml与requests模块爬取起点中文网的免费阅读列表爬取的思路: 首先来讲,爬取内容并非是最重要的,我个人认为要先知道思路,然后再去写代码,就会容易很多。 再就来说说，要写这个爬虫的思路: 首先，应该先看看网站的robots.txt文件，来看一下网站上什么内容可以，让我们去爬取,这里附上其内容，可以看到起点是应该全都可让我们去爬的，然后放心的去写代码。 1234 User-Agent: *Allow: /Allow: /*.cssAllow: /*.js 接下来，就是要获得其URL资源，注意到起点网上的free区的URL是如下的，然后我们尝试着去删除一些无用的信息，来简化URL,来获得同样的页面。https://www.qidian.com/free/all?orderId=&amp;vip=hidden&amp;style=1&amp;pageSize=20&amp;siteid=1&amp;pubflag=0&amp;hiddenField=1&amp;page=2通过尝试我们只要留下 all?page=2 这一部分就可以获得我们想要的结果。于是修改URL为https://www.qidian.com/free/all?page={}这样可以通过format() 方法来构造我们要爬取多少页。 下一步，就要去构造xpath，来获得数据,在chrome浏览器中按F12来查看网页的源码，接着我们就要去找到信息的位置: 12&lt;div class=&quot;book-mid-info&quot;&gt; &lt;h4&gt;&lt;a href=&quot;//book.qidian.com/info/1010741811&quot; target=&quot;_blank&quot; data-eid=&quot;qd_E05&quot; data-bid=&quot;1010741811&quot;&gt;大劫主&lt;/a&gt;&lt;/h4&gt; 对于此xml的节点，我们要得到一个book的名字就只要用etree下的xpath方法，就可以得到想要的信息。代码如下：xpath(&quot;//div[@class=&#39;book-img-text&#39;]//h4//a/text()&quot;)这样就可以得到我们想要的数据了。但是有的地方可能有”\\r”或者是空格只要用replace()方法替代一下就可以了。 最后附上全部的代码：附:爬取的结果图：这样就可以基本上爬到想要的信息了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import requestsimport jsonfrom lxml import etreeclass qidian: def __init__(self): self.headers =&#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&quot;&#125; self.start_url=&quot;https://www.qidian.com/free/all?page=&#123;&#125;&quot; def get_free_url_List(self): return [self.start_url.format(i) for i in range(1,120)] def parse_url(self,url): response=requests.get(url,headers=self.headers) return response.content def get_url_list(self,html_url): html=etree.HTML(html_url) div_lists=html.xpath(&quot;//div[@class=&apos;all-book-list&apos;]&quot;) content_list=[] for div in div_lists: item=&#123;&#125; item[&quot;title&quot;]=div.xpath(&quot;.//h4/a/text()&quot;) item[&quot;title&quot;]=item[&quot;title&quot;][0] if len(item[&quot;title&quot;][0])&gt;0 else None item[&quot;author&quot;]=div.xpath(&quot;.//p[@class=&apos;author&apos;]//a[@class=&apos;name&apos;]/text()&quot;) item[&quot;author&quot;]=item[&quot;author&quot;][0] if len(item[&quot;author&quot;][0])&gt;0 else None item[&quot;content-sum&quot;]=div.xpath(&quot;.//p[@class=&apos;intro&apos;]/text()&quot;) item[&quot;content-sum&quot;]=[div.replace(&quot;\\r&quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]] item[&quot;content-sum&quot;]=[div.replace(&quot; &quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]] item[&quot;href&quot;]=&quot;https:&quot;+div.xpath(&quot;.//h4/a/@href&quot;)[0] if len(div.xpath(&quot;.//h4/a/@href&quot;)[0])&gt;0 else None item[&quot;img&quot;]=&quot;https:&quot;+div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0] if len(div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0])&gt;0 else None content_list.append(item) return content_list def save_content(self,content_list): with open(&quot;起点中文网免费文章1.txt&quot;,&quot;a&quot;,encoding=&apos;utf-8&apos; ) as f: for i in content_list: f.write(json.dumps(i, ensure_ascii=False)) f.write(&quot;\\n&quot;) # 写入换行符，进行换行 print(&quot;保存成功！&quot;) def run(self): # 发送请求，获得响应 # 接收数据，并处理数据 # 保存数据 url_list=self.get_free_url_List() for url in url_list: html_url=self.parse_url(url) content_list=self.get_url_list(html_url) self.save_content(content_list)if __name__ == &quot;__main__&quot;: spider_qidian=qidian() spider_qidian.run()","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"python爬虫","slug":"Hexo/python爬虫","permalink":"http://yoursite.com/categories/Hexo/python爬虫/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}]},{"title":"python导入lxml中的etree模块","slug":"lxml模块的下载","date":"2019-01-31T16:00:00.000Z","updated":"2019-03-09T03:52:46.805Z","comments":true,"path":"2019/02/01/lxml模块的下载/","link":"","permalink":"http://yoursite.com/2019/02/01/lxml模块的下载/","excerpt":"","text":"python导入lxml中的etree模块 首先，使用pycharm中自带的下载器，下载的是不带etree模块的 再一点就是，看网上说部分lxml版本是不含etree模块的应该去找能和自己python版本兼容而且有etree模块的lxml版本 可以去官网上下载自己想要的版本官网可用版本链接 官网 如何去安装lxml模块 下载好这样一个文件:lxml-3.7.2-cp36-cp36m-win32.whl 后在cmd中用 pip install lxml-3.7.2-cp36-cp36m-win32.whl 看提示安装完成后，在cmd中测试查看是否可以使用etree模块,就是进入python,导入etree模块:from lxml import etree,若不报错，说明成功，否则就要检查是哪里出现了问题 注意命名文件时不要和这些模块重名，这样也会导入不成功","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"python爬虫","slug":"Hexo/python爬虫","permalink":"http://yoursite.com/categories/Hexo/python爬虫/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-09-30T16:00:00.000Z","updated":"2019-03-09T03:53:34.973Z","comments":true,"path":"2018/10/01/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]}