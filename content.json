{"meta":{"title":"一护的Blog","subtitle":null,"description":null,"author":"bleach一护","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-03-09T03:21:55.000Z","updated":"2019-03-09T03:21:55.192Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-03-07T15:37:41.000Z","updated":"2019-03-07T15:39:04.293Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-03-09T03:21:41.000Z","updated":"2019-03-09T03:21:41.386Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CE小游戏第一关","slug":"CE小游戏第一关","date":"2019-08-10T16:00:00.000Z","updated":"2019-09-27T04:11:03.582Z","comments":true,"path":"2019/08/11/CE小游戏第一关/","link":"","permalink":"http://yoursite.com/2019/08/11/CE小游戏第一关/","excerpt":"","text":"CE小游戏第一关 这次首先来讲一下CE自带的小游戏的第一关，第一关的意思就是每发射5次子弹目标就会重新恢复生命，我们要做的就是把目标击败。思路一 我们来尝试攻击目标发现其血量在依次降低，到了第五次恢复满，于是就有想法去搜索其生命值，第一次未知就搜未知的值，后面生命值减少时，搜减少的值，当生命值增加时，再去搜增加的值来锁定血量的地址。当我们第一次搜减小的值发现有很多值，于是我们还要继续这样来搜索以便减少无用的地址量。 当我们在搜索到第4次发现一个值只有4，很符合我们的需求，于是我们再测第五次来验证我们的想法。第五次搜索后其值更改回了100，于是我们可以确定这个地址就是我们要找的血量地址。 我们找到了地址以后肯定想着要去改变它的值，好让我们通关，于是我们来看看是什么地方改变其值的，ctrl+f6 走着，找到了改变其值的代码，于是我们肯定想着去更改代码。于是我们在这里进行代码注入。 我们把其值改为0，然后再去打它发现我们就已经成功了。于是我们就已经采用这种方法完成了。 思路二 我们发现我们的子弹只有五发，于是另一个想法就是我们把子弹的数量改为很多不久也可以改变其值，于是我们就顺着这个思路来做。但是再测试中我也尝试在子弹只有五发的时候来搜索5，但是顺着这个思路走，发现根本无法找到我们想要的结果，于是我就想子弹应该是存在数组中的，通过函数来减小其值，于是就有了一个想法就是数组在入栈的时候，其第一个值如array[0],应该是最靠近栈顶的，,这样我们就能更加直观的体会到我们应该怎么样去查了，我们在想想假如存了5发子弹我们可以正向的记录打出的子弹，也可以记录剩下多少子弹，于是我们就猜测数组里存放的是打了几发子弹（这样便于记录）,于是我们在第一次搜索0，第二次搜索1，依次类推。以这种方式我们成功的找到子弹数量的地址，于是我们还是要再次代码注入。 观察代码可以看出其值是每次加1，也就是说和我们猜测的一致，于是我们只要把1改为0就可以了。-当我们把子弹改为 add 00 我们便可以发现子弹的数量就不会变了，于是我们变成功了。这样我们第一关就结束了！！！！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme40","slug":"160个crackme40","date":"2019-05-21T16:00:00.000Z","updated":"2019-10-04T02:26:32.672Z","comments":true,"path":"2019/05/22/160个crackme40/","link":"","permalink":"http://yoursite.com/2019/05/22/160个crackme40/","excerpt":"","text":"160个crackme40首先来看看这个程序 这个程序的样子很普通和平常见的crackme程序没什么不同，我们随便输入用户名和密码来测试一下，那肯定是不行咯，于是我们便按照程序来解决他。吼吼吼！！！查壳 我们首先要去查看这个程序是否加了壳，将其拖入peid，查看发现其是delphi的程序，对于delphi的程序，我们就采用 “先darkde4查看事件的信息，在使用OD来解决” 的思路来解决，于是我们就把这个程序拖入darkde4中。 我们在 过程 窗口中找到了多个有用的事件最重要的就是Button1Click这个事件，这个控件应该就是和我们注册能否成功相挂钩的。于是我就想在od中直接找到这个事件来开始我们的算法分析。 算法分析 打开OD，我们直接跳到Buttonclick的地址来分析。 我们先大体看一下这些代码，大概在离入口不远的地址就有了对注册信息的判断，看来这个程序的注册过程一定不是很复杂，那么我们就一步步来分析。 这些代码就是判断用户名和密码是否为空，如果有一个为空就结束并且弹出对话框提示有一项为空。这一段循环就是生成密码的过程，就是 循环取用户名的ascii值并且每次都加5并把值放在[ebp-4]的地址中 并且这个过程完成后就直接到了判断的地方，也就是说密码就是很简单的过程啊啊啊。 注册机的编写 既然都知道了算法并且如此的简单，于是我便随便写了一个python脚本来解决它。代码如下:1234567891011while 1: str1=input(&quot;请输入你的用户名&quot;) str2=[] str3=[] for i in range(0,len(str1)): temp=ord(str1[i])+5 str2.append(temp) for i in str2: str3.append(chr(i)) str4=&apos;&apos;.join(str3) print(str4) 最后附上一个我们的结果图:注: 要注意当你的用户名有z的时候加五之后其ascii的值表示为删除，所以这一题中还是尽量不要出现z为好 当你按照这个打的时候很可能出错！！！！！！！但是这不是你注册机编写的错误！！！！！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"160个crackme02","slug":"160个crackme02","date":"2019-04-10T16:00:00.000Z","updated":"2019-09-27T02:11:37.900Z","comments":true,"path":"2019/04/11/160个crackme02/","link":"","permalink":"http://yoursite.com/2019/04/11/160个crackme02/","excerpt":"","text":"160个crackme02 1.首先来尝试爆破 首先直接打开这个小程序随便输入一个账号和密码，来尝试一下是什么效果：我们通过输入可以看出来会有弹窗，这样我们就可以用OD的插件来去搜索字符串，找到地址来具体分析，之后我们打开OD来用插件查看其地址. 我们进入去分析，我们看到了前面有一个je，并且跳转地址是判断错误的地方，断定这个地方就是关键跳转点。,于是我们就可以通过把ZF的值改变，来爆破。也可以nop填充来爆破。当然这只是第一步，下面就来对密码生成的算法来尝试破解 2.破解密码生成的算法 我们这里就要从头开始分析，第一个函数，是来获得你输入账号的长度。再用其长度0x17CFB.第二个函数，是获得你输入账号的第一个字符的ascii码的值，然后，再把值和上一步得到的结果相加。后面的汇编很长，在这里还有一个是把“AKA-”这个前缀给了密码。但是都不是检查输入的密码和生成密码是否相同的，我们要去找到一个比较两者是否相同的函数.从这个地方看到一个cmp的函数推测是来比较密码是否一致的，我们下一个断点，F7跟进一下。我们可以看到在函数中就有了密码的比较，在这个栈中可以清楚的看到两个密码，于是可以断定密码的生成方法就是: **AKA-长度0x17CFB+账号的第一个字符的ascii码的值**然后写一个简单python脚本来实现此过程: 12345str1=input(&quot;输入一个字符串&quot;)pass1 =len(str1)*0x17CFBpass2=ord(str1[0])+pass1pass3=&quot;AKA-&quot;+str(pass2)print(pass3) 然后我们来测试一下是否正确:到此为止就已经完成了crackme02！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"破解基础","slug":"破解基础","permalink":"http://yoursite.com/tags/破解基础/"}]},{"title":"CE的基础练习","slug":"CE的基础练习","date":"2019-02-05T16:00:00.000Z","updated":"2019-09-25T14:46:52.770Z","comments":true,"path":"2019/02/06/CE的基础练习/","link":"","permalink":"http://yoursite.com/2019/02/06/CE的基础练习/","excerpt":"","text":"CE的基础练习 首先，CE就是cheat engine就是作弊引擎，我也是看了吾爱破解的大佬的相关文章之后也觉得记录一下自己的学习过程。附上大佬的帖子链接吾爱破解CE链接 接下来，我们就直接开始做做CE提供的基础题，我这里用的CE是中文版的，大家也可以直接在我爱破解上下载，或者用我在这里给的链接CE中文版,提取码是:0o2z不过下载完解压完之后还不是中文版，大家要自己在setting选项上选择中文。 接下来就要开始CE的基础使用了，CE自己提供了一个内置的小学习程序挺有趣的教学内容，我们就一题一题的往下做。 首先第一题，CE的这个小练习，在帮助栏里可以找到。那第一题的要求是这样的,就是要我们把生命值改为1000，而且提示里说用精确数值扫描，所以我们就顺着题目的要求来找到地址，修改值即可。首先我们先要把进程加载到CE中，然后我们用精确数值扫描。我们知道刚刚开始时，生命是100，所以我们首先来搜100，就是用默认的4字节的方式就可以。第一次扫描会有很多的值，所以我们要进行筛选。我们点击 “打我”，可以看到我们的生命减一点变为了98，于是我们再去搜索98，就这样持续下去可以定位到改变生命的地址.我们双击那个唯一的地址，把他加入到地址列表中，修改值为1000。，这样我们就可以回到那个小测试上，发现已经可以点击下一步了，第一题就结束了。 接着就开始做第二个题目，第二个题目就是说是未知大小的值，因为我们看不到我们的生命值，于是我们可以使用CE的未知值来先搜索，我们在扫描类型中选择 未知的初始值 然后开始扫描,可以看到扫描结果很大，连地址都没有出现，但是我们可以想象到应该通过血量的变化来锁定地址，在小程序中点击打我，可以看到生命值减小了，于是我们在接着搜 减少的数值那一项*,可以看到地址减少了很多，于是还是继续上述的打我-搜减小的数值,得到如下的结果,结合提示信息知道血量在 0-500* 之间于是我们找到地址直接改为5000结束。 第三题是关于浮点数，单双精度的问题，这两个算是很简单的了，直接在搜索中选择确定的值，在 数值类型 中选择单浮点和多浮点然后再按照上两题那样的方法，来锁定地址就可以过关了。 第四题的题目，本题就是要我们来修改代码来使当我们点击 改变数值 时值不改变，那我们还是要先找到变动数值的地址，方法和上面几题一样。然后我们选中地址右键选择 找出是什么改变了地址 这一项或者直接 Ctrl+F6,然后我们会看到这样一个小窗口，,然后我们回到小程序的界面点击改变数值，可以发现其中已经有汇编代码了，,这里我们直接把它nop掉，或者注释掉都可以实现我们的目的，，这样就ok了。 第五题，,这个题目就是去学着去找基址，首先要做的还是锁定数值的地址，方法和上述题目一样。，锁定了之后看他题目的描述，就是找到指针，那我们还是Ctrl+f6走起，来看看什么能改变这个地址。，我们可以看到一个很符合指针特征的汇编代码就是MOV [edx],eax这个是典型的指针变量的特征。前面肯定有取址的指令。如果有没有学过c语言的人可能不知道为什么这符合指针的特征，我们就用一个例子来解释一下。,我们可以在VC6的反汇编窗口看到，编译器处理指针时，首先取地址，把地址值传给寄存器，在把寄存器的值传给指针变量，当然这是debug版的。为什么不把地址直接传给指针变量呢（mov指令的使用规则，两个内存不能用mov指令）。这样我们知道指针的特征后，这个题目就很好解决了我们找到了一个地址这个地址是存放在指针里的，在去找一下那个指针的地址，我们只要在去搜一下这个地址即可，这样我们手动添加到地址栏，我们这里的偏移为0，也很容易理解毕竟只是 [edx] 没有偏移。然后我们找到基址后修改值为5000后点击改变指针就成功完成了。 第六题，，这一题就是要我们通过修改代码来实现点一下 打我 加两滴血的操作，当然第一步还是先找到血量的地址。找到地址后我们就要去看看是哪个地方改变了这个值,,注意到的操作是sub dword ptr [],01于是我们知道血量的操作是每次减一，我们只要改成 add dword ptr[],02，就可以了我们只要用CE，进入自动汇编后选择代码注入，地址就是在默认的那个点击确定后，出现代码，然后按照我的想法修改sub为add后的代码后再去小程序中点击打我会发现开始加血了，于是本题也就成功了。 第七题，，多级指针这可能是初学c语言的同学最头疼的地方，题目中给出的是一个4级指针，我们不妨在c语言里给出一个四级指针来演示一下过程，好让初学者更好的理解多级指针。首先以2级指针为例，，这就很容易理解2级指针里存放的是一级指针的地址，那么如果是4级指针就是存放3级指针的地址，我们来看一下，从图中可以看出对于4级指针它就是存放的3级指针的地址，层层递进的关系。于是我们在来看题目，还是先找到最初的血量地址，方法雷同，，找到之后我们还是查看什么改变了这个地址，我们可以看到那个代码符合指针的特征[esi+18]注意这里的18是偏移量，于是我们把 01936a80 放入搜索栏中得到了一个新的地址，我们还是顺着上面的思路不过这次不要选什么改变了，选什么访问了地址。，然后我们发现怎么地址是一样的呢，，我的想法就是因为我们得到的地址是加了偏移的地址(在结果栏显示的地址，但是这里没有偏移也就是说我们定位的地址就是其指针的地址)这里引用一个大佬的话 CE 默认使用硬件断点的方式，断点只能停在指令执行之后，而这条指令正好是把 esi 原来指向的地址中的值再赋值给 esi，所以执行之后 esi 的值已经是被覆盖掉的值了，而我们想知道的恰恰是执行这条指令之前的 esi 值，那么怎么办呢，我们发现有一个地址是指向这个地址的于是我想看看是不是这个地址就是上一个指针的地址于是怀着试试看的想法我搜了一下地址，结果发现点击改变数值，确实发生了变化，于是锁定了地址。，然后发现这一个的偏移是0x14，于是接着搜地址，这次的地址偏移是0x0c下一次按照提示就应该是基址了，于是我们再接着搜地址，就是搜地址找到基址为止！，于是我们终于找到了基址！！！ ,这样一来剩下的就只要手动加地址，修改值就OK了。再按照我们刚刚讲解的四级指针的运作流程填偏移就很简单了，然后我们在锁定一下，再去改值就ok了. 第8题 题目，这题很好玩就是模拟对打要求就是你要获胜但是不能够锁定生命值，在这道题里生命值为单浮点类型。我的想法就是先找到血量的地址，再通过代码注入来修改生命值获得胜利，我们首先来找我们自己人的生命地址，我们在地址栏点击我们选中的地址在选择 浏览相关内存区域,可以看到在18e00b0处有一个01的标识，可以猜测是否为组队信息，于是我们接着找队友eric与对手HAL的标识来确认我们的新想法。，对比可以看到一个的标识是01，另一个是02这也确定了我们的想法，于是我们就这此处注入代码。结果就是不会改变我方的值，只有敌人的血量变化。，我们点击重启游戏并且执行后发现，我们成功了 ！！！！到这里基础的内容CE内容就结束了，CE后面还自带了几个好玩的小游戏的练习后面也会做出来玩玩。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"Cheat Engine","slug":"Hexo/Cheat-Engine","permalink":"http://yoursite.com/categories/Hexo/Cheat-Engine/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Cheat Engine","slug":"Cheat-Engine","permalink":"http://yoursite.com/tags/Cheat-Engine/"}]},{"title":"正则表达式学习1","slug":"正则表达式1","date":"2019-02-05T16:00:00.000Z","updated":"2019-03-16T15:40:19.730Z","comments":true,"path":"2019/02/06/正则表达式1/","link":"","permalink":"http://yoursite.com/2019/02/06/正则表达式1/","excerpt":"","text":"正则表达式的初步学习第一次接触正则是在大二的时候，现在长时间不使用，有些概念比较模糊，因此准备重拾一下自己的知识。 正则表达式是什么？ 正则表达式在菜鸟教程中的概念如下： 正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等 我的个人理解就是来对文本进行匹配的。 正则表达式的基础规则： 位置标记： 位置标记锚点是表识字符串位置的正则表达式。 正则表达式 描述 实例 ^ 指定了匹配正则表达式的文本必须始于字符串的首部 ^zxc可匹配以zxc为首的行 $ 指定了匹配正则表达式的文本必须始于字符串的尾部 zxc$可匹配以zxc结尾的行 标识符: 标识符是正则表达式的基础部分 正则表达式 描述 实例 . 匹配任意一个字符 asq.可以匹配asq1或者asqe 但是不能匹配asqer 其只能匹配单个的字符 [ ] 匹配括号中的任意一个字符，中括号内可以为字符组或者字符范围 par[kj]可以匹配park或者parj ,[0-9]可以匹配任意的单个数字 [ ^ ] 匹配不在中括号中的任意一个字符 这个就比较好理解如 9[^12]就不能匹配91 或者 92 数量修饰符: 数量修饰符定义了模式可出现的次数 正则表达式 描述 实例 ? 只能够匹配之前的项1次或者0次 courl?可以匹配courl 或者是cour + 匹配之前的一项1次或者多次 courl+ 可以匹配courl或者 courll 等等 * 可以匹配之前的一项0次或者多次 c * ourl可以匹配 courl或者ccourl或者是ourl 等等 {n} 匹配之前的项n次 如[0-9]{2} 能够匹配任意的两位数 {n,} 之前的项至少要匹配n次 如[0-9]{4}能够匹配任意一个4位数或者更多位的数字 {n,m} 之前的项匹配的最小次数与最多次数 [0-9]{2,5}匹配两位数到五位数之前的任何数字 正则表达式的基本规则大概就是这些，之后会给出如何匹配出你想要得到的数据","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"正则表达式学习","slug":"Hexo/正则表达式学习","permalink":"http://yoursite.com/categories/Hexo/正则表达式学习/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"正则表达式学习","slug":"正则表达式学习","permalink":"http://yoursite.com/tags/正则表达式学习/"}]},{"title":"xpath中常用语法","slug":"xpath常用语法总结","date":"2019-02-03T16:00:00.000Z","updated":"2019-04-09T14:50:06.675Z","comments":true,"path":"2019/02/04/xpath常用语法总结/","link":"","permalink":"http://yoursite.com/2019/02/04/xpath常用语法总结/","excerpt":"","text":"xpath常用语法 xpath是一门在XML文档中查—title: 正则表达式学习1 date: 2019-02-06tags: Hexo 正则表达式学习categories: Hexo 正则表达式学习 —找信息的语言，在爬虫中常用来查找信息，因此掌握其语法，可以帮助我们很好的去查找想要获得的信息。 如何来进行节点的选择 选择一个适当的节点，对于找寻信息至关重要。往往一个/或者//的选取会得到不同的信息，而且可能和你想像的相差甚远。接下来，就来说明几个重要的概念。 父节点与子节点: 如下图所示:的解释一样。 下面来具体的讲讲如何来选取节点: xpath使用路径表达式在XML文档中选择节点的，节点是沿着路径或者step来选取的. 表达式 描述 / 从根节点来选取 // 从当前节点进行选取，不考虑其位置 @ 选取属性 . 选取当前节点 以一个例子来实际操作一下:先选取其父节点，然后依次来找出信息所在位置的节点信息，最后获得其内容当然，一般浏览器都可以自动获得xpath，但是还是有必要学习一下，以此为例子，我们能够看出来实际中如何取操作这些节点来得到我们想要得到的消息. 最后来推荐一个chrome插件，来帮助大家来学习xpath，叫做xpath helper 前提是你可以科学上网","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"python爬虫","slug":"Hexo/python爬虫","permalink":"http://yoursite.com/categories/Hexo/python爬虫/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}]},{"title":"用lxml与requests模块爬取起点中文网的免费阅读列表","slug":"用python中的lxml模块爬取起点网免费阅读列表","date":"2019-02-02T16:00:00.000Z","updated":"2019-03-10T03:35:57.332Z","comments":true,"path":"2019/02/03/用python中的lxml模块爬取起点网免费阅读列表/","link":"","permalink":"http://yoursite.com/2019/02/03/用python中的lxml模块爬取起点网免费阅读列表/","excerpt":"","text":"用lxml与requests模块爬取起点中文网的免费阅读列表爬取的思路: 首先来讲,爬取内容并非是最重要的,我个人认为要先知道思路,然后再去写代码,就会容易很多。 再就来说说，要写这个爬虫的思路: 首先，应该先看看网站的robots.txt文件，来看一下网站上什么内容可以，让我们去爬取,这里附上其内容，可以看到起点是应该全都可让我们去爬的，然后放心的去写代码。 1234 User-Agent: *Allow: /Allow: /*.cssAllow: /*.js 接下来，就是要获得其URL资源，注意到起点网上的free区的URL是如下的，然后我们尝试着去删除一些无用的信息，来简化URL,来获得同样的页面。https://www.qidian.com/free/all?orderId=&amp;vip=hidden&amp;style=1&amp;pageSize=20&amp;siteid=1&amp;pubflag=0&amp;hiddenField=1&amp;page=2通过尝试我们只要留下 all?page=2 这一部分就可以获得我们想要的结果。于是修改URL为https://www.qidian.com/free/all?page={}这样可以通过format() 方法来构造我们要爬取多少页。 下一步，就要去构造xpath，来获得数据,在chrome浏览器中按F12来查看网页的源码，接着我们就要去找到信息的位置: 12&lt;div class=&quot;book-mid-info&quot;&gt; &lt;h4&gt;&lt;a href=&quot;//book.qidian.com/info/1010741811&quot; target=&quot;_blank&quot; data-eid=&quot;qd_E05&quot; data-bid=&quot;1010741811&quot;&gt;大劫主&lt;/a&gt;&lt;/h4&gt; 对于此xml的节点，我们要得到一个book的名字就只要用etree下的xpath方法，就可以得到想要的信息。代码如下：xpath(&quot;//div[@class=&#39;book-img-text&#39;]//h4//a/text()&quot;)这样就可以得到我们想要的数据了。但是有的地方可能有”\\r”或者是空格只要用replace()方法替代一下就可以了。 最后附上全部的代码：附:爬取的结果图：这样就可以基本上爬到想要的信息了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import requestsimport jsonfrom lxml import etreeclass qidian: def __init__(self): self.headers =&#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&quot;&#125; self.start_url=&quot;https://www.qidian.com/free/all?page=&#123;&#125;&quot; def get_free_url_List(self): return [self.start_url.format(i) for i in range(1,120)] def parse_url(self,url): response=requests.get(url,headers=self.headers) return response.content def get_url_list(self,html_url): html=etree.HTML(html_url) div_lists=html.xpath(&quot;//div[@class=&apos;all-book-list&apos;]&quot;) content_list=[] for div in div_lists: item=&#123;&#125; item[&quot;title&quot;]=div.xpath(&quot;.//h4/a/text()&quot;) item[&quot;title&quot;]=item[&quot;title&quot;][0] if len(item[&quot;title&quot;][0])&gt;0 else None item[&quot;author&quot;]=div.xpath(&quot;.//p[@class=&apos;author&apos;]//a[@class=&apos;name&apos;]/text()&quot;) item[&quot;author&quot;]=item[&quot;author&quot;][0] if len(item[&quot;author&quot;][0])&gt;0 else None item[&quot;content-sum&quot;]=div.xpath(&quot;.//p[@class=&apos;intro&apos;]/text()&quot;) item[&quot;content-sum&quot;]=[div.replace(&quot;\\r&quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]] item[&quot;content-sum&quot;]=[div.replace(&quot; &quot;,&quot;&quot;) for div in item[&quot;content-sum&quot;]] item[&quot;href&quot;]=&quot;https:&quot;+div.xpath(&quot;.//h4/a/@href&quot;)[0] if len(div.xpath(&quot;.//h4/a/@href&quot;)[0])&gt;0 else None item[&quot;img&quot;]=&quot;https:&quot;+div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0] if len(div.xpath(&quot;.//div[@class=&apos;book-img-box&apos;]//img/@src&quot;)[0])&gt;0 else None content_list.append(item) return content_list def save_content(self,content_list): with open(&quot;起点中文网免费文章1.txt&quot;,&quot;a&quot;,encoding=&apos;utf-8&apos; ) as f: for i in content_list: f.write(json.dumps(i, ensure_ascii=False)) f.write(&quot;\\n&quot;) # 写入换行符，进行换行 print(&quot;保存成功！&quot;) def run(self): # 发送请求，获得响应 # 接收数据，并处理数据 # 保存数据 url_list=self.get_free_url_List() for url in url_list: html_url=self.parse_url(url) content_list=self.get_url_list(html_url) self.save_content(content_list)if __name__ == &quot;__main__&quot;: spider_qidian=qidian() spider_qidian.run()","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"python爬虫","slug":"Hexo/python爬虫","permalink":"http://yoursite.com/categories/Hexo/python爬虫/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}]},{"title":"python导入lxml中的etree模块","slug":"lxml模块的下载","date":"2019-01-31T16:00:00.000Z","updated":"2019-03-09T03:52:46.805Z","comments":true,"path":"2019/02/01/lxml模块的下载/","link":"","permalink":"http://yoursite.com/2019/02/01/lxml模块的下载/","excerpt":"","text":"python导入lxml中的etree模块 首先，使用pycharm中自带的下载器，下载的是不带etree模块的 再一点就是，看网上说部分lxml版本是不含etree模块的应该去找能和自己python版本兼容而且有etree模块的lxml版本 可以去官网上下载自己想要的版本官网可用版本链接 官网 如何去安装lxml模块 下载好这样一个文件:lxml-3.7.2-cp36-cp36m-win32.whl 后在cmd中用 pip install lxml-3.7.2-cp36-cp36m-win32.whl 看提示安装完成后，在cmd中测试查看是否可以使用etree模块,就是进入python,导入etree模块:from lxml import etree,若不报错，说明成功，否则就要检查是哪里出现了问题 注意命名文件时不要和这些模块重名，这样也会导入不成功","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"},{"name":"python爬虫","slug":"Hexo/python爬虫","permalink":"http://yoursite.com/categories/Hexo/python爬虫/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-09-30T16:00:00.000Z","updated":"2019-03-09T03:53:34.973Z","comments":true,"path":"2018/10/01/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]}